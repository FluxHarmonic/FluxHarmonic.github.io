<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
     xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Simple Blog</title>
    <atom:link
      href=""
      rel="self" type="application/rss+xml" />
    <link></link>
    <description><![CDATA[]]></description>
    <language>en</language>
    <pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate>
    <lastBuildDate>Thu, 06 Jan 2022 19:36:41 +0000</lastBuildDate>
    <generator>weblorg 0.1.0 (https://emacs.love/weblorg)</generator>
    <image>
      <url>media/img/8bitme.png</url>
      <title>Flux Harmonic</title>
      <link></link>
    </image>

    
    <item>
      <title>Creating Our First Image</title>
      <link></link>
      <author>author@mail.com (Blog Author)</author>
      <guid isPermaLink="false"></guid>
      <pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate>
      <description><![CDATA[<p>
Today's goal: create a basic image and render it to a PNG file!
</p>

<p>
<a href="https://youtu.be/8TdaQhoxqeQ">Watch the recording</a> on YouTube!
</p>

<div id="outline-container-updates" class="outline-2">
<h2 id="updates">Updates</h2>
<div class="outline-text-2">
<ul class="org-ul">
<li>Thanks to Ashraz, we now have lsp-mode (and eglot) working for the C code!</li>
<li>Project Makefiles are now generated by CMake</li>
<li>The generated <code>compile_commands.json</code> feeds <code>ccls</code> information about where project dependencies are</li>
</ul>
</div>
</div>

<div id="outline-container-looking-ahead" class="outline-2">
<h2 id="looking-ahead">Looking Ahead</h2>
<div class="outline-text-2">
<ul class="org-ul">
<li>I <i>really</i> want to abandon SDL2 as soon as I can</li>
<li>Write my own rendering layer with OpenGL and shaders</li>
<li>My goal is to use GLFW to set up rendering context, event loop, and input</li>
<li>The plan: get some things working in SDL2 to validate the model, then drop it</li>
</ul>
</div>
</div>

<div id="outline-container-tasks" class="outline-2">
<h2 id="tasks">Tasks</h2>
<div class="outline-text-2" id="text-tasks">
</div>
<div id="outline-container-figure-out-why-scene-flipping-doesn-t-work-event-problem" class="outline-3">
<h3 id="figure-out-why-scene-flipping-doesn-t-work-event-problem"><span class="done DONE">DONE</span> Figure out why scene flipping doesn't work (event problem?)</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-flesh-out-the-approach-for-calling-c-functions-to-communicate-scene-data" class="outline-3">
<h3 id="flesh-out-the-approach-for-calling-c-functions-to-communicate-scene-data"><span class="done DONE">DONE</span> Flesh out the approach for calling C functions to communicate scene data</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-make-sure-that-we-can-re-eval-the-scheme-code-to-update-the-live-preview" class="outline-3">
<h3 id="make-sure-that-we-can-re-eval-the-scheme-code-to-update-the-live-preview"><span class="done DONE">DONE</span> Make sure that we can re-eval the Scheme code to update the live preview</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-render-the-image-to-a-png-file" class="outline-3">
<h3 id="render-the-image-to-a-png-file"><span class="done DONE">DONE</span> Render the image to a .png file</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-write-a-function-that-can-convert-html-style-hex-colors-to-rgba" class="outline-3">
<h3 id="write-a-function-that-can-convert-html-style-hex-colors-to-rgba"><span class="todo TODO">TODO</span> Write a function that can convert HTML-style hex colors to RGBA</h3>
</div>
<div id="outline-container-load-and-render-an-image-file" class="outline-3">
<h3 id="load-and-render-an-image-file"><span class="todo TODO">TODO</span> Load and render an image file</h3>
</div>
<div id="outline-container-figure-out-how-to-render-basic-text-on-the-image" class="outline-3">
<h3 id="figure-out-how-to-render-basic-text-on-the-image"><span class="todo TODO">TODO</span> Figure out how to render basic text on the image</h3>
</div>

<div id="outline-container-try-to-clean-up-the-old-scene-memory-when-it-s-no-longer-needed" class="outline-3">
<h3 id="try-to-clean-up-the-old-scene-memory-when-it-s-no-longer-needed"><span class="todo TODO">TODO</span> Try to clean up the old scene memory when it's no longer needed</h3>
</div>
</div>

<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2">
<ul class="org-ul">
<li>Creating a "screenshot" of an SDL2 renderer: <a href="https://gist.github.com/malja/2193bd656fe50c203f264ce554919976">https://gist.github.com/malja/2193bd656fe50c203f264ce554919976</a></li>
</ul>
</div>
</div>

<div id="outline-container-results" class="outline-2">
<h2 id="results">Results</h2>
<div class="outline-text-2">
<p>
Here's the image we were able to save today:
</p>

<p>
<img src="https://fluxharmonic.com/static/results/2022-01-06.png" alt="Result image" />
</p>

<p>
Here is the commit for the code changes from today:
</p>

<p>
<a href="https://github.com/FluxHarmonic/flux-compose/commit/9ea27cdf2cf4940bd09356f8a12f1c9c702f86cf">https://github.com/FluxHarmonic/flux-compose/commit/9ea27cdf2cf4940bd09356f8a12f1c9c702f86cf</a>
</p>
</div>
</div>

<div id="outline-container-next-steps" class="outline-2">
<h2 id="next-steps">Next Steps</h2>
<div class="outline-text-2" id="text-next-steps">
</div>
<div id="outline-container-figure-out-why-the-window-isn-t-the-correct-size" class="outline-3">
<h3 id="figure-out-why-the-window-isn-t-the-correct-size"><span class="todo TODO">TODO</span> Figure out why the window isn't the correct size</h3>
</div>
<div id="outline-container-figure-out-how-to-convert-scheme-string-to-null-terminated-bytevector" class="outline-3">
<h3 id="figure-out-how-to-convert-scheme-string-to-null-terminated-bytevector"><span class="todo TODO">TODO</span> Figure out how to convert Scheme string to null-terminated bytevector</h3>
</div>
<div id="outline-container-finish-writing-function-that-can-convert-html-style-hex-colors-to-rgba" class="outline-3">
<h3 id="finish-writing-function-that-can-convert-html-style-hex-colors-to-rgba"><span class="todo TODO">TODO</span> Finish writing function that can convert HTML-style hex colors to RGBA</h3>
</div>
<div id="outline-container-load-and-render-an-image-file" class="outline-3">
<h3 id="load-and-render-an-image-file"><span class="todo TODO">TODO</span> Load and render an image file</h3>
</div>
<div id="outline-container-figure-out-how-to-render-basic-text-on-the-image" class="outline-3">
<h3 id="figure-out-how-to-render-basic-text-on-the-image"><span class="todo TODO">TODO</span> Figure out how to render basic text on the image</h3>
</div>
<div id="outline-container-try-to-clean-up-the-old-scene-memory-when-it-s-no-longer-needed" class="outline-3">
<h3 id="try-to-clean-up-the-old-scene-memory-when-it-s-no-longer-needed"><span class="todo TODO">TODO</span> Try to clean up the old scene memory when it's no longer needed</h3>
</div>
</div>
]]></description>
    </item>
    
    <item>
      <title>Encoding the Scene</title>
      <link></link>
      <author>author@mail.com (Blog Author)</author>
      <guid isPermaLink="false"></guid>
      <pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate>
      <description><![CDATA[
<div id="outline-container-updates" class="outline-2">
<h2 id="updates">Updates</h2>
<div class="outline-text-2">
<ul class="org-ul">
<li>Recieved a few issues and pull requests, thanks Christian and Felipe!</li>
<li>Improved the README with basic hacking instructions</li>
<li>Moved <code>lib</code> code, improved <code>Makefiles</code></li>
<li>Considered Zig this weekend, will stick with C for now</li>
<li>Didn't get the summary video out this week!</li>
</ul>
</div>
</div>

<div id="outline-container-encoding-c-structs-from-scheme" class="outline-2">
<h2 id="encoding-c-structs-from-scheme">Encoding C structs from Scheme</h2>
<div class="outline-text-2">
<ul class="org-ul">
<li>Structs are laid out contiguously</li>
<li>Do we need to worry about memory alignment?</li>
<li>What about nested data?</li>
</ul>
</div>
</div>

<div id="outline-container-tasks" class="outline-2">
<h2 id="tasks">Tasks</h2>
<div class="outline-text-2" id="text-tasks">
</div>
<div id="outline-container-try-to-finish-instantiating-a-test-scene-in-c-try-felipe-s-fix" class="outline-3">
<h3 id="try-to-finish-instantiating-a-test-scene-in-c-try-felipe-s-fix"><span class="done DONE">DONE</span> Try to finish instantiating a test scene in C (try Felipe's fix)</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-figure-out-how-to-create-the-c-struct-representation-for-scene-objects-in-scheme" class="outline-3">
<h3 id="figure-out-how-to-create-the-c-struct-representation-for-scene-objects-in-scheme"><span class="done DONE">DONE</span> Figure out how to create the C struct representation for scene objects in Scheme</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-get-the-basic-gfx-scm-example-working" class="outline-3">
<h3 id="get-the-basic-gfx-scm-example-working"><span class="done DONE">DONE</span> Get the <code>basic-gfx.scm</code> example working</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-transmit-drawing-instructions-to-renderer-thread-in-some-form-sdl-event" class="outline-3">
<h3 id="transmit-drawing-instructions-to-renderer-thread-in-some-form-sdl-event"><span class="todo TODO">TODO</span> Transmit drawing instructions to renderer thread in some form (SDL event?)</h3>
</div>
<div id="outline-container-make-sure-that-we-can-re-eval-the-scheme-code-to-update-the-live-preview" class="outline-3">
<h3 id="make-sure-that-we-can-re-eval-the-scheme-code-to-update-the-live-preview"><span class="todo TODO">TODO</span> Make sure that we can re-eval the Scheme code to update the live preview</h3>
</div>
<div id="outline-container-render-the-completed-image-to-a-png-file" class="outline-3">
<h3 id="render-the-completed-image-to-a-png-file"><span class="todo TODO">TODO</span> Render the completed image to a .png file</h3>
</div>
<div id="outline-container-load-and-render-an-image-file" class="outline-3">
<h3 id="load-and-render-an-image-file"><span class="todo TODO">TODO</span> Load and render an image file</h3>
</div>
</div>

<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2">
<ul class="org-ul">
<li><a href="https://www.youtube.com/watch?v=443UNeGrFoM">Video: How I Write C (Highly Recommended)</a></li>
<li><a href="https://wiki.libsdl.org/SDL_PushEvent">https://wiki.libsdl.org/SDL_PushEvent</a></li>
</ul>

<p>
The commit for the code from this stream:
<a href="https://github.com/FluxHarmonic/flux-compose/commit/d4e4d3f849784a23669b27349d767ee503acfe6a">https://github.com/FluxHarmonic/flux-compose/commit/d4e4d3f849784a23669b27349d767ee503acfe6a</a>
</p>
</div>
</div>

<div id="outline-container-next-steps" class="outline-2">
<h2 id="next-steps">Next Steps</h2>
<div class="outline-text-2" id="text-next-steps">
</div>
<div id="outline-container-figure-out-why-scene-flipping-doesn-t-work-event-problem" class="outline-3">
<h3 id="figure-out-why-scene-flipping-doesn-t-work-event-problem"><span class="todo TODO">TODO</span> Figure out why scene flipping doesn't work (event problem?)</h3>
</div>
<div id="outline-container-transmit-drawing-instructions-to-renderer-thread-in-some-form" class="outline-3">
<h3 id="transmit-drawing-instructions-to-renderer-thread-in-some-form"><span class="todo TODO">TODO</span> Transmit drawing instructions to renderer thread in some form</h3>
</div>
<div id="outline-container-make-sure-that-we-can-re-eval-the-scheme-code-to-update-the-live-preview" class="outline-3">
<h3 id="make-sure-that-we-can-re-eval-the-scheme-code-to-update-the-live-preview"><span class="todo TODO">TODO</span> Make sure that we can re-eval the Scheme code to update the live preview</h3>
</div>
<div id="outline-container-render-the-completed-image-to-a-png-file" class="outline-3">
<h3 id="render-the-completed-image-to-a-png-file"><span class="todo TODO">TODO</span> Render the completed image to a .png file</h3>
</div>
<div id="outline-container-load-and-render-an-image-file" class="outline-3">
<h3 id="load-and-render-an-image-file"><span class="todo TODO">TODO</span> Load and render an image file</h3>
</div>
</div>
]]></description>
    </item>
    
    <item>
      <title>Creating the Graphics Layer</title>
      <link></link>
      <author>author@mail.com (Blog Author)</author>
      <guid isPermaLink="false"></guid>
      <pubDate>Thu, 30 Dec 2021 00:00:00 +0000</pubDate>
      <description><![CDATA[<p>
View the code: <a href="https://github.com/FluxHarmonic/flux-compose">https://github.com/FluxHarmonic/flux-compose</a>
</p>

<div id="outline-container-schedule-change" class="outline-2">
<h2 id="schedule-change">Schedule Change!</h2>
<div class="outline-text-2">
<p>
Starting <b>next week</b> I'm moving the stream start time forward by one hour.
</p>

<p>
Streams will now be <b>Tuesday and Thursday, 2PM - 5PM UTC</b>!
</p>
</div>
</div>

<div id="outline-container-graphics-layer-design" class="outline-2">
<h2 id="graphics-layer-design">Graphics Layer Design</h2>
<div class="outline-text-2">
<p>
Let's continue with the idea we came up with last time to see how far we can take it:
</p>

<ul class="org-ul">
<li>Use a <a href="https://en.wikipedia.org/wiki/Retained_mode">retained mode</a> rendering model</li>
<li>Describe the graphics to be rendered in the Scheme layer</li>
<li>The C layer will interpret and render the complete scene or instruction list efficiently</li>
<li>The Scheme layer can replace the graphics instructions at any time (REPL-based "drawing")</li>
<li>Animations will eventually be possible by describing changes to elements in the scene over time</li>
</ul>

<p>
The goal today is to get some basic things rendering in a preview window and <i>possibly</i> save it out to a .png file.
</p>
</div>
</div>

<div id="outline-container-tasks" class="outline-2">
<h2 id="tasks">Tasks</h2>
<div class="outline-text-2">
<p>
Here's what I'd like to accomplish today:
</p>
</div>

<div id="outline-container-rename-the-project-to-flux-compose" class="outline-3">
<h3 id="rename-the-project-to-flux-compose"><span class="done DONE">DONE</span> Rename the project to <code>flux-compose</code></h3>
<div class="outline-text-3">
</div>
</div>

<div id="outline-container-create-a-shared-library-for-core-c-code" class="outline-3">
<h3 id="create-a-shared-library-for-core-c-code"><span class="done DONE">DONE</span> Create a shared library for core C code</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-try-a-ffi-approach-for-calling-c-functions-from-a-shared-library" class="outline-3">
<h3 id="try-a-ffi-approach-for-calling-c-functions-from-a-shared-library"><span class="done DONE">DONE</span> Try a FFI approach for calling C functions from a shared library</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-get-the-screen-clearing" class="outline-3">
<h3 id="get-the-screen-clearing"><span class="done DONE">DONE</span> Get the screen clearing</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-find-a-faster-way-to-iterate-on-the-native-layer" class="outline-3">
<h3 id="find-a-faster-way-to-iterate-on-the-native-layer"><span class="done DONE">DONE</span> Find a faster way to iterate on the native layer</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-get-something-simple-rendering-in-the-c-code" class="outline-3">
<h3 id="get-something-simple-rendering-in-the-c-code"><span class="done DONE">DONE</span> Get something simple rendering in the C code</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-figure-out-why-init-graphics-is-crashing-the-process-can-we-come-up-with-a-good-debugging-strategy-running-via-gdb" class="outline-3">
<h3 id="figure-out-why-init-graphics-is-crashing-the-process-can-we-come-up-with-a-good-debugging-strategy-running-via-gdb"><span class="done DONE">DONE</span> Figure out why <code>init-graphics</code> is crashing the process, can we come up with a good debugging strategy (running via gdb)</h3>
<div class="outline-text-3">
</div>
</div>

<div id="outline-container-transmit-drawing-instructions-to-renderer-thread-in-some-form" class="outline-3">
<h3 id="transmit-drawing-instructions-to-renderer-thread-in-some-form"><span class="todo TODO">TODO</span> Transmit drawing instructions to renderer thread in some form</h3>
</div>
<div id="outline-container-get-the-basic-gfx-scm-example-working" class="outline-3">
<h3 id="get-the-basic-gfx-scm-example-working"><span class="todo TODO">TODO</span> Get the <code>basic-gfx.scm</code> example working</h3>
</div>
<div id="outline-container-render-the-completed-image-to-a-png-file" class="outline-3">
<h3 id="render-the-completed-image-to-a-png-file"><span class="todo TODO">TODO</span> Render the completed image to a .png file</h3>
<div class="outline-text-3">
<p>
<a href="https://stackoverflow.com/questions/34255820/save-sdl-texture-to-file">https://stackoverflow.com/questions/34255820/save-sdl-texture-to-file</a>
</p>
</div>
</div>
</div>

<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2">
<ul class="org-ul">
<li><a href="https://www.gnu.org/software/guile/manual/html_node/Foreign-Function-Interface.html">https://www.gnu.org/software/guile/manual/html_node/Foreign-Function-Interface.html</a></li>
<li><a href="https://www.gnu.org/software/guile/manual/html_node/Foreign-Functions.html">https://www.gnu.org/software/guile/manual/html_node/Foreign-Functions.html</a></li>
<li><a href="https://www.gnu.org/software/guile/manual/html_node/Foreign-Structs.html">https://www.gnu.org/software/guile/manual/html_node/Foreign-Structs.html</a></li>
<li><a href="https://www.gnu.org/software/guile/manual/html_node/Void-Pointers-and-Byte-Access.html">https://www.gnu.org/software/guile/manual/html_node/Void-Pointers-and-Byte-Access.html</a></li>
<li><a href="https://willosborne.co.uk/coding/2019/11/16/iterators-and-for-loops-with-guile-scheme.html">https://willosborne.co.uk/coding/2019/11/16/iterators-and-for-loops-with-guile-scheme.html</a></li>
<li><a href="https://sourceforge.net/p/sdl2gfx/code/HEAD/tree/trunk/SDL2_gfxPrimitives.h">https://sourceforge.net/p/sdl2gfx/code/HEAD/tree/trunk/SDL2_gfxPrimitives.h</a></li>
<li><a href="https://www.ferzkopp.net/Software/SDL2_gfx/Docs/html/_s_d_l2__gfx_primitives_8h.html">https://www.ferzkopp.net/Software/SDL2_gfx/Docs/html/_s_d_l2__gfx_primitives_8h.html</a></li>
<li><a href="https://www.gnu.org/software/guile/manual/html_node/Coding-With-Keywords.html">https://www.gnu.org/software/guile/manual/html_node/Coding-With-Keywords.html</a></li>
</ul>

<p>
The commit for the code from this stream:
</p>

<p>
<a href="https://github.com/FluxHarmonic/flux-compose/commit/4adf5e16fc161f23cc9b95398f006ad6fb97c3c2">https://github.com/FluxHarmonic/flux-compose/commit/4adf5e16fc161f23cc9b95398f006ad6fb97c3c2</a>
</p>
</div>
</div>

<div id="outline-container-next-steps" class="outline-2">
<h2 id="next-steps">Next Steps</h2>
<div class="outline-text-2" id="text-next-steps">
</div>
<div id="outline-container-try-to-finish-instantiating-a-test-scene-in-c-use-gan-s-example" class="outline-3">
<h3 id="try-to-finish-instantiating-a-test-scene-in-c-use-gan-s-example"><span class="todo TODO">TODO</span> Try to finish instantiating a test scene in C (use Gan's example)</h3>
</div>
<div id="outline-container-figure-out-how-to-create-the-c-struct-representation-for-scene-objects-in-scheme" class="outline-3">
<h3 id="figure-out-how-to-create-the-c-struct-representation-for-scene-objects-in-scheme"><span class="todo TODO">TODO</span> Figure out how to create the C struct representation for scene objects in Scheme</h3>
</div>
<div id="outline-container-transmit-drawing-instructions-to-renderer-thread-in-some-form-sdl-event" class="outline-3">
<h3 id="transmit-drawing-instructions-to-renderer-thread-in-some-form-sdl-event"><span class="todo TODO">TODO</span> Transmit drawing instructions to renderer thread in some form (SDL event?)</h3>
</div>
<div id="outline-container-get-the-basic-gfx-scm-example-working" class="outline-3">
<h3 id="get-the-basic-gfx-scm-example-working"><span class="todo TODO">TODO</span> Get the <code>basic-gfx.scm</code> example working</h3>
</div>
<div id="outline-container-make-sure-that-we-can-re-eval-the-scheme-code-to-update-the-live-preview" class="outline-3">
<h3 id="make-sure-that-we-can-re-eval-the-scheme-code-to-update-the-live-preview"><span class="todo TODO">TODO</span> Make sure that we can re-eval the Scheme code to update the live preview</h3>
</div>
<div id="outline-container-render-the-completed-image-to-a-png-file" class="outline-3">
<h3 id="render-the-completed-image-to-a-png-file"><span class="todo TODO">TODO</span> Render the completed image to a .png file</h3>
</div>
</div>
]]></description>
    </item>
    
    <item>
      <title>Laying the Foundation</title>
      <link></link>
      <author>author@mail.com (Blog Author)</author>
      <guid isPermaLink="false"></guid>
      <pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate>
      <description><![CDATA[
<div id="outline-container-the-plan" class="outline-2">
<h2 id="the-plan">The Plan</h2>
<div class="outline-text-2">
<p>
The overall goal of this channel is to create an audiovisual playground that I use to create music, videos, graphics, and even games live on stream!
</p>

<p>
All tools will be purpose-built for myself.  I don't intend for others to use my tools at first, but over time I might be able to add a level of polish that would enable others to use them.
</p>
</div>

<div id="outline-container-audio-tools" class="outline-3">
<h3 id="audio-tools">Audio Tools</h3>
<div class="outline-text-3">
<ul class="org-ul">
<li>Synthesizers of various types (additive, subtractive, FM, wavetable, sampler)</li>
<li>Effects processors of various types (compressor, limiter, noise gate, reverb, chorus, flanger, etc)</li>
<li>Custom music creation environment on Linux powered by JACK or Pipewire (DAW)</li>
</ul>
</div>
</div>

<div id="outline-container-visual-tools" class="outline-3">
<h3 id="visual-tools">Visual Tools</h3>
<div class="outline-text-3">
<ul class="org-ul">
<li>Custom video creation and editing environment</li>
<li>Visual effects processors of various types</li>
<li>Audio visualizations of various types</li>
<li>Motion graphics tools for video animations and still graphics (video thumbnails, etc)</li>
<li>Whiteboard tool for drawing diagrams live in streams (and possibly for videos)</li>
</ul>
</div>
</div>

<div id="outline-container-programming" class="outline-3">
<h3 id="programming">Programming</h3>
<div class="outline-text-3">
<ul class="org-ul">
<li>Low-level custom C libraries (the core of all tools will be written in C!)</li>
<li>Custom programming tools for quick live programming of native applications and audio plugins</li>
<li>Custom Scheme-inspired scripting language that powers the various tools and serves as an authoring and data format</li>
</ul>
</div>
</div>

<div id="outline-container-streaming" class="outline-3">
<h3 id="streaming">Streaming</h3>
<div class="outline-text-3">
<ul class="org-ul">
<li>Custom live streaming software that integrates the various tools I make</li>
<li>Live-rendered scenes, video filters, generated graphics, viewer-interactable components, etc</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-why" class="outline-2">
<h2 id="why">Why?</h2>
<div class="outline-text-2">
<p>
I enjoy programming for the creative value and to see what I can accomplish.
</p>

<ul class="org-ul">
<li>Create background music and graphics for my YouTube channels</li>
<li>Produce a full album of music created with my own tools</li>
<li>Design a really unique streaming experience</li>
<li>Create Free Software games</li>
</ul>

<p>
I want to do all this while making the experience of watching it fun and interesting!
</p>

<p>
All of this won't be achievable in the short term: I see it as a long-term adventure in creativity.
</p>
</div>
</div>

<div id="outline-container-the-design" class="outline-2">
<h2 id="the-design">The Design</h2>
<div class="outline-text-2">
<p>
To accomplish all of this, I've got a specific design in mind:
</p>

<ul class="org-ul">
<li>Write all multimedia components in C (or similar low-level language)</li>
<li>Use Guile Scheme as the interactivity layer (at first)</li>
<li>Create an Emacs package to facilitate interactivity and rapid development</li>
<li>Use GNU Guix as the orchestrator for development, distribute tools via a channel</li>
<li>Be pragmatic, but ultimately write things as "from scratch" as I can!</li>
</ul>

<p>
The source to everything will be available as I write it, most likely licensed as GPL 3.0.
</p>
</div>
</div>

<div id="outline-container-the-starting-point" class="outline-2">
<h2 id="the-starting-point">The Starting Point</h2>
<div class="outline-text-2">
<ul class="org-ul">
<li>Get the basic infrastructure set up for the C core with the Guile Scheme layer</li>
<li>Set up a SDL window to start experimenting with graphics (later write our own graphics layer)</li>
<li>Start building a graphics tool to make video thumbnails and stream graphics</li>
</ul>
</div>
</div>

<div id="outline-container-tasks" class="outline-2">
<h2 id="tasks">Tasks</h2>
<div class="outline-text-2">
<p>
Here's what I'd like to accomplish today:
</p>
</div>

<div id="outline-container-create-a-basic-c-application-that-loads-guile-scheme-engine" class="outline-3">
<h3 id="create-a-basic-c-application-that-loads-guile-scheme-engine"><span class="done DONE">DONE</span> Create a basic C application that loads Guile Scheme engine</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-start-a-repl-and-get-it-loading-inside-of-emacs" class="outline-3">
<h3 id="start-a-repl-and-get-it-loading-inside-of-emacs"><span class="done DONE">DONE</span> Start a REPL and get it loading inside of Emacs</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-start-building-the-language-for-describing-graphics-scenes" class="outline-3">
<h3 id="start-building-the-language-for-describing-graphics-scenes"><span class="done DONE">DONE</span> Start building the "language" for describing graphics scenes</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-set-up-sdl-so-that-we-can-start-drawing-things-to-the-screen" class="outline-3">
<h3 id="set-up-sdl-so-that-we-can-start-drawing-things-to-the-screen"><span class="done DONE">DONE</span> Set up SDL so that we can start drawing things to the screen</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-figure-out-how-to-use-guix-shell-to-create-a-reproducible-dev-environment" class="outline-3">
<h3 id="figure-out-how-to-use-guix-shell-to-create-a-reproducible-dev-environment"><span class="done DONE">DONE</span> Figure out how to use <code>guix shell</code> to create a reproducible dev environment</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-get-something-rendering-on-the-screen" class="outline-3">
<h3 id="get-something-rendering-on-the-screen"><span class="todo TODO">TODO</span> Get something rendering on the screen!</h3>
</div>
<div id="outline-container-push-the-initial-code-to-github" class="outline-3">
<h3 id="push-the-initial-code-to-github"><span class="todo TODO">TODO</span> Push the initial code to GitHub</h3>
</div>
</div>

<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2">
<p>
The code we created can be found at the following GitHub repository:
</p>

<p>
<a href="https://github.com/FluxHarmonic/flux-compose">https://github.com/FluxHarmonic/flux-compose</a>
</p>

<p>
Here are some links I gathered during the stream:
</p>

<ul class="org-ul">
<li><a href="https://serenityos.org/">https://serenityos.org/</a></li>
<li><a href="https://www.gnu.org/software/guile/manual/html_node/A-Sample-Guile-Main-Program.html">https://www.gnu.org/software/guile/manual/html_node/A-Sample-Guile-Main-Program.html</a></li>
<li><a href="https://gigi.nullneuron.net/gigilabs/showing-an-empty-window-in-sdl2/">https://gigi.nullneuron.net/gigilabs/showing-an-empty-window-in-sdl2/</a></li>
<li><a href="https://www.ibm.com/docs/en/i/7.2?topic=ssw_ibm_i_72/apis/users_14.htm">https://www.ibm.com/docs/en/i/7.2?topic=ssw_ibm_i_72/apis/users_14.htm</a></li>
</ul>
</div>
</div>

<div id="outline-container-next-steps" class="outline-2">
<h2 id="next-steps">Next Steps</h2>
<div class="outline-text-2" id="text-next-steps">
</div>
<div id="outline-container-don-t-show-guile-scheme-banner-when-starting-flux-studio" class="outline-3">
<h3 id="don-t-show-guile-scheme-banner-when-starting-flux-studio"><span class="todo TODO">TODO</span> Don't show Guile Scheme banner when starting <code>flux-studio</code></h3>
</div>
<div id="outline-container-figure-out-why-init-graphics-can-t-be-accessed-in-flux-graphics-module" class="outline-3">
<h3 id="figure-out-why-init-graphics-can-t-be-accessed-in-flux-graphics-module"><span class="todo TODO">TODO</span> Figure out why <code>init-graphics</code> can't be accessed in <code>flux graphics</code> module</h3>
</div>
<div id="outline-container-figure-out-why-init-graphics-is-crashing-the-process-can-we-come-up-with-a-good-debugging-strategy-running-via-gdb" class="outline-3">
<h3 id="figure-out-why-init-graphics-is-crashing-the-process-can-we-come-up-with-a-good-debugging-strategy-running-via-gdb"><span class="todo TODO">TODO</span> Figure out why <code>init-graphics</code> is crashing the process, can we come up with a good debugging strategy (running via gdb)</h3>
</div>
<div id="outline-container-get-something-rendering-on-the-screen" class="outline-3">
<h3 id="get-something-rendering-on-the-screen"><span class="todo TODO">TODO</span> Get something rendering on the screen!</h3>
</div>
</div>
]]></description>
    </item>
    

  </channel>
</rss>
