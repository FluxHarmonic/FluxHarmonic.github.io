<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
     xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Simple Blog</title>
    <atom:link
      href=""
      rel="self" type="application/rss+xml" />
    <link></link>
    <description><![CDATA[]]></description>
    <language>en</language>
    <pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate>
    <lastBuildDate>Thu, 17 Feb 2022 17:08:30 +0000</lastBuildDate>
    <generator>weblorg 0.1.0 (https://emacs.love/weblorg)</generator>
    <image>
      <url>media/img/8bitme.png</url>
      <title>Flux Harmonic</title>
      <link></link>
    </image>

    
    <item>
      <title>Rendering Thumbnails with Mesche</title>
      <link></link>
      <author>author@mail.com (Blog Author)</author>
      <guid isPermaLink="false"></guid>
      <pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate>
      <description><![CDATA[<p>
<b>Today's goal:</b> Write the Flux Harmonic thumbnail description in Mesche!
</p>

<div id="outline-container-updates" class="outline-2">
<h2 id="updates">Updates</h2>
<div class="outline-text-2">
<ul class="org-ul">
<li>Mark-and-sweep GC is now added!</li>
<li>Added standard Scheme-style function definitions</li>
<li>Added initial support for keyword arguments</li>
</ul>
</div>
</div>

<div id="outline-container-rendering-thumbnails-with-mesche" class="outline-2">
<h2 id="rendering-thumbnails-with-mesche">Rendering Thumbnails with Mesche</h2>
<div class="outline-text-2">
<p>
Mesche needs the ability to describe a "scene" to be rendered, like this:
</p>

<div class="org-src-container">
<pre class="src src-scheme">
(define thumb
  (scene :width 1000
	 :height 1000
	 :members
	 (list (circle :name 'circle1
		       :x 200
		       :y 500
		       :radius 100
		       :color (rgb 255 0 0)))))

</pre>
</div>

<p>
To make this happen we'll need to define some functions both in Mesche and C to wire up this capability!
</p>

<p>
Let's see if we can get enough added to describe the Flux Harmonic thumbnail image purely in Mesche so that we can remove the hardcoded C code.
</p>
</div>
</div>

<div id="outline-container-tasks" class="outline-2">
<h2 id="tasks">Tasks</h2>
<div class="outline-text-2" id="text-tasks">
</div>
<div id="outline-container-start-building-a-set-of-mesche-functions-to-replicate-what-we-want-in-the-scene-description" class="outline-3">
<h3 id="start-building-a-set-of-mesche-functions-to-replicate-what-we-want-in-the-scene-description"><span class="done DONE">DONE</span> Start building a set of Mesche functions to replicate what we want in the scene description</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-expose-c-functions-for-building-the-actual-scene-objects" class="outline-3">
<h3 id="expose-c-functions-for-building-the-actual-scene-objects"><span class="done DONE">DONE</span> Expose C functions for building the actual scene objects</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-add-an-object-type-for-handling-c-pointers" class="outline-3">
<h3 id="add-an-object-type-for-handling-c-pointers"><span class="done DONE">DONE</span> Add an object type for handling C pointers</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-implement-a-basic-list-object-type" class="outline-3">
<h3 id="implement-a-basic-list-object-type"><span class="todo TODO">TODO</span> Implement a basic list object type</h3>
</div>
</div>

<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2">
<p>
The changes for this stream can be found here:
</p>

<p>
<a href="https://github.com/FluxHarmonic/flux-compose/commit/43423b3a2f87ce1f579043e534b1e58ae2542b2c">https://github.com/FluxHarmonic/flux-compose/commit/43423b3a2f87ce1f579043e534b1e58ae2542b2c</a>
</p>
</div>
</div>

<div id="outline-container-next-steps" class="outline-2">
<h2 id="next-steps">Next Steps</h2>
<div class="outline-text-2" id="text-next-steps">
</div>
<div id="outline-container-implement-a-basic-list-object-type" class="outline-3">
<h3 id="implement-a-basic-list-object-type"><span class="todo TODO">TODO</span> Implement a basic list object type</h3>
</div>
<div id="outline-container-add-apis-for-displaying-images-and-text-in-a-scene" class="outline-3">
<h3 id="add-apis-for-displaying-images-and-text-in-a-scene"><span class="todo TODO">TODO</span> Add APIs for displaying images and text in a scene</h3>
</div>
<div id="outline-container-ensure-that-native-objects-are-being-freed-correctly" class="outline-3">
<h3 id="ensure-that-native-objects-are-being-freed-correctly"><span class="todo TODO">TODO</span> Ensure that native objects are being freed correctly</h3>
</div>
</div>
]]></description>
    </item>
    
    <item>
      <title>Compiling Mesche to Bytecode</title>
      <link></link>
      <author>author@mail.com (Blog Author)</author>
      <guid isPermaLink="false"></guid>
      <pubDate>Tue, 15 Feb 2022 00:00:00 +0000</pubDate>
      <description><![CDATA[<p>
<b>Today's goal:</b> Wire up the new Mesche compiler to Flux Compose and start building APIs for it!
</p>

<div id="outline-container-updates" class="outline-2">
<h2 id="updates">Updates</h2>
<div class="outline-text-2">
<ul class="org-ul">
<li>Today we're using a thumbnail generated by <code>flux-compose</code>!</li>
<li>Thanks to Ashraz for debugging some memory issues that most likely caused corruption and segfaults!</li>
<li>Thankfully, we won't need to fix that particular issue&#x2026;</li>
</ul>
</div>
</div>

<div id="outline-container-what-is-mesche" class="outline-2">
<h2 id="what-is-mesche">What is Mesche?</h2>
<div class="outline-text-2">
<p>
When I started working on a scripting language for Flux Compose, I said I wasn't going to make a general purpose language&#x2026;  until I read Crafting Interpreters by Robert Nystrom!
</p>

<p>
Mesche is the name of a Scheme-inspired language I've been working on in various forms for a year or so.  Originally the plan was to make it a compiled-to-native language that emitted x86 assembly and linked directly to C libraries, but that's a huge project!
</p>

<p>
<b>The new plan:</b>
</p>

<p>
Use Mesche as a C-native scripting language; build on and work well with C to leverage it fully instead of pretending to be a separate language entirely.
</p>

<p>
This isn't meant to be a full standalone environment, it's a hacker's tool for writing better C programs!
</p>
</div>

<div id="outline-container-what-makes-it-scheme-inspired" class="outline-3">
<h3 id="what-makes-it-scheme-inspired">What makes it Scheme-inspired?</h3>
<div class="outline-text-3">
<ul class="org-ul">
<li>First class functions with lexical scoping and closures</li>
<li>Intended to be a minimal core that you can build on using modules and macros</li>
<li>Will use tail recursion for looping (not implemented yet, but soon)</li>
<li><i>Might</i> implement continuations in the future, but might add complexity</li>
</ul>

<p>
However&#x2026;
</p>

<ul class="org-ul">
<li>It's not intended to be used with SRFIs.  Why?  Because this is a more focused language</li>
<li>It's doesn't follow R*RS (the Scheme spec) closely.  Freedom to specialize!</li>
</ul>
</div>
</div>

<div id="outline-container-what-works" class="outline-3">
<h3 id="what-works">What works?</h3>
<div class="outline-text-3">
<ul class="org-ul">
<li>Compiles directly to bytecode running on a custom VM</li>
<li>First-class functions with closures</li>
<li>Native function registration for integrating with C APIs</li>
<li>Supports running a VM per OS thread (untested, but designed for it)</li>
<li>Garbage collection (mark and sweep) almost finished</li>
</ul>
</div>
</div>

<div id="outline-container-what-comes-next" class="outline-3">
<h3 id="what-comes-next">What comes next?</h3>
<div class="outline-text-3">
<ul class="org-ul">
<li>Unhygenic (and possibly hygenic) macro definitions</li>
<li>Build out the standard library of things that will definitely be needed (I/O, file/path APIs, process management)</li>
<li>Defining code in modules that can be loaded into Mesche projects</li>
<li>Defining structure types in Mesche</li>
<li>Define bindings to C functions and structures in Mesche code, generates C bindings at compile time</li>
<li>APIs for working with dynamic arrays of C structures, cache-friendliness</li>
<li>Cross-platform build orchestration, dependency management, and release builds with <code>mesche build</code></li>
<li><i>In the far future</i>, native JIT compilation and creating standalone Mesche binaries</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-tasks" class="outline-2">
<h2 id="tasks">Tasks</h2>
<div class="outline-text-2" id="text-tasks">
</div>
<div id="outline-container-wire-up-mesche-to-our-existing-flux-compose-apis-to-see-if-it-works" class="outline-3">
<h3 id="wire-up-mesche-to-our-existing-flux-compose-apis-to-see-if-it-works"><span class="done DONE">DONE</span> Wire up Mesche to our existing Flux Compose APIs to see if it works!</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-start-adding-some-standard-library-functions-to-enable-building-with-mesche-build" class="outline-3">
<h3 id="start-adding-some-standard-library-functions-to-enable-building-with-mesche-build"><span class="todo TODO">TODO</span> Start adding some standard library functions to enable building with <code>mesche build</code></h3>
</div>
<div id="outline-container-delete-old-scripting-language-code" class="outline-3">
<h3 id="delete-old-scripting-language-code"><span class="todo TODO">TODO</span> Delete old scripting language code?</h3>
</div>
</div>

<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2">
<p>
Check out the code for this stream here:
<a href="https://github.com/FluxHarmonic/flux-compose/commit/23a3d24ac542233524b4a40c111eb4fb172c3721">https://github.com/FluxHarmonic/flux-compose/commit/23a3d24ac542233524b4a40c111eb4fb172c3721</a>
</p>

<p>
The Mesche compiler code is here:
<a href="https://github.com/FluxHarmonic/flux-compose/tree/23a3d24ac542233524b4a40c111eb4fb172c3721/lib/mesche">https://github.com/FluxHarmonic/flux-compose/tree/23a3d24ac542233524b4a40c111eb4fb172c3721/lib/mesche</a>
</p>
</div>
</div>

<div id="outline-container-next-steps" class="outline-2">
<h2 id="next-steps">Next Steps</h2>
</div>
]]></description>
    </item>
    
    <item>
      <title>Hardcoding our First Video Thumbnail</title>
      <link></link>
      <author>author@mail.com (Blog Author)</author>
      <guid isPermaLink="false"></guid>
      <pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate>
      <description><![CDATA[<p>
<b>Today's goal:</b> Produce our first real thumbnail by replicating the one for today's stream!
</p>

<div id="outline-container-updates" class="outline-2">
<h2 id="updates">Updates</h2>
<div class="outline-text-2">
<ul class="org-ul">
<li>Thanks to Garjola for pointing out a bug that affected font rendering!</li>
<li>I expanded the Fontconfig code slightly</li>
<li>I've been rewriting the scripting language&#x2026;</li>
</ul>
</div>
</div>

<div id="outline-container-producing-a-real-thumbnail-finally" class="outline-2">
<h2 id="producing-a-real-thumbnail-finally">Producing a Real Thumbnail (Finally!)</h2>
<div class="outline-text-2">
<p>
We now have enough functionality to produce basic, usable thumbnails!
</p>

<ul class="org-ul">
<li>Loading and saving PNG files</li>
<li>Rendering image textures</li>
<li>Rendering text</li>
<li>Fragment shader support</li>
</ul>

<p>
Today we'll use these features to hardcode a replication of the thumbnail I created for today's stream!
</p>

<p>
Once we've got this working, I'll start using this code to produce the thumbnail for all future Flux Harmonic streams.
</p>
</div>
</div>

<div id="outline-container-tasks" class="outline-2">
<h2 id="tasks">Tasks</h2>
<div class="outline-text-2" id="text-tasks">
</div>
<div id="outline-container-move-existing-test-render-code-into-its-own-function" class="outline-3">
<h3 id="move-existing-test-render-code-into-its-own-function"><span class="done DONE">DONE</span> Move existing test render code into its own function</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-create-a-new-function-to-hardcode-the-rendering-of-stream-thumbnails" class="outline-3">
<h3 id="create-a-new-function-to-hardcode-the-rendering-of-stream-thumbnails"><span class="done DONE">DONE</span> Create a new function to hardcode the rendering of stream thumbnails</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-fix-image-renderer-to-create-the-correct-size-of-image-with-appropriate-output" class="outline-3">
<h3 id="fix-image-renderer-to-create-the-correct-size-of-image-with-appropriate-output"><span class="todo TODO">TODO</span> Fix image renderer to create the correct size of image with appropriate output</h3>
</div>
<div id="outline-container-write-a-function-to-measure-the-pixel-width-of-a-string-rendered-with-a-specific-font-to-use-in-screen-centering" class="outline-3">
<h3 id="write-a-function-to-measure-the-pixel-width-of-a-string-rendered-with-a-specific-font-to-use-in-screen-centering"><span class="todo TODO">TODO</span> Write a function to measure the pixel width of a string rendered with a specific font to use in screen centering</h3>
</div>
<div id="outline-container-expand-the-font-fragment-shader-to-add-a-configurable-drop-shadow-to-text" class="outline-3">
<h3 id="expand-the-font-fragment-shader-to-add-a-configurable-drop-shadow-to-text"><span class="todo TODO">TODO</span> Expand the font fragment shader to add a configurable drop shadow to text</h3>
</div>
</div>

<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2">
<p>
The code for this stream can be found here:
</p>

<p>
<a href="https://github.com/FluxHarmonic/flux-compose/commit/cd8d51ef68555a1d334f2c9d35ee7fb92de4b5be">https://github.com/FluxHarmonic/flux-compose/commit/cd8d51ef68555a1d334f2c9d35ee7fb92de4b5be</a>
</p>
</div>
</div>

<div id="outline-container-next-steps" class="outline-2">
<h2 id="next-steps">Next Steps</h2>
<div class="outline-text-2" id="text-next-steps">
</div>
<div id="outline-container-fix-basic-positioning-of-textures-on-screen" class="outline-3">
<h3 id="fix-basic-positioning-of-textures-on-screen"><span class="todo TODO">TODO</span> Fix basic positioning of textures on screen</h3>
</div>
<div id="outline-container-fix-color-blending-of-fill-rects-emile-s-gamma-fix" class="outline-3">
<h3 id="fix-color-blending-of-fill-rects-emile-s-gamma-fix"><span class="todo TODO">TODO</span> Fix color blending of fill rects (Emile's gamma fix)</h3>
</div>
<div id="outline-container-fix-image-renderer-to-create-the-correct-size-of-image-with-appropriate-output" class="outline-3">
<h3 id="fix-image-renderer-to-create-the-correct-size-of-image-with-appropriate-output"><span class="todo TODO">TODO</span> Fix image renderer to create the correct size of image with appropriate output</h3>
</div>
<div id="outline-container-write-a-function-to-measure-the-pixel-width-of-a-string-rendered-with-a-specific-font-to-use-in-screen-centering" class="outline-3">
<h3 id="write-a-function-to-measure-the-pixel-width-of-a-string-rendered-with-a-specific-font-to-use-in-screen-centering"><span class="todo TODO">TODO</span> Write a function to measure the pixel width of a string rendered with a specific font to use in screen centering</h3>
</div>
<div id="outline-container-expand-the-font-fragment-shader-to-add-a-configurable-drop-shadow-to-text" class="outline-3">
<h3 id="expand-the-font-fragment-shader-to-add-a-configurable-drop-shadow-to-text"><span class="todo TODO">TODO</span> Expand the font fragment shader to add a configurable drop shadow to text</h3>
</div>
</div>
]]></description>
    </item>
    
    <item>
      <title>I Rewrote The Graphics Layer...</title>
      <link></link>
      <author>author@mail.com (Blog Author)</author>
      <guid isPermaLink="false"></guid>
      <pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate>
      <description><![CDATA[<p>
<b>Today's goal:</b> Finish our initial implementation of TrueType font rendering!
</p>

<div id="outline-container-updates" class="outline-2">
<h2 id="updates">Updates</h2>
<div class="outline-text-2">
<ul class="org-ul">
<li>Join the Discord for Flux Harmonic: <a href="https://discord.gg/ryy97Rdw">https://discord.gg/ryy97Rdw</a></li>
<li>I rewrote the graphics layer</li>
</ul>
</div>
</div>

<div id="outline-container-so-about-those-opengl-apis" class="outline-2">
<h2 id="so-about-those-opengl-apis">So about those OpenGL APIs&#x2026;</h2>
<div class="outline-text-2">
<p>
After Tuesday's stream, I looked at the OpenGL text rendering sample we were using from learnopengl.com.  I then realized why they were using shaders!
</p>

<p>
That led me on a path to get shaders working in the engine, and then I realized I had been using deprecated OpenGL APIs since we switched from SDL to GLFW&#x2026;
</p>

<p>
I've rewritten all of the rendering logic to now use vertex arrays and shaders!  This actually puts us in a perfect spot for future work.
</p>

<p>
<b>Benefits</b>
</p>

<ul class="org-ul">
<li>Potential for much better rendering performance</li>
<li>Can more efficiently pass our data structures directly to OpenGL</li>
<li>Shaders give us <b>many</b> possibilities for rendering effects</li>
</ul>
</div>
</div>

<div id="outline-container-tasks" class="outline-2">
<h2 id="tasks">Tasks</h2>
<div class="outline-text-2" id="text-tasks">
</div>
<div id="outline-container-rewrite-glyph-renderer-using-new-opengl-apis-and-a-shader" class="outline-3">
<h3 id="rewrite-glyph-renderer-using-new-opengl-apis-and-a-shader"><span class="done DONE">DONE</span> Rewrite glyph renderer using new OpenGL APIs and a shader</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-implement-proper-glyph-alignment" class="outline-3">
<h3 id="implement-proper-glyph-alignment"><span class="done DONE">DONE</span> Implement "proper" glyph alignment</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-use-fontconfig-to-find-the-font-by-name" class="outline-3">
<h3 id="use-fontconfig-to-find-the-font-by-name"><span class="done DONE">DONE</span> Use FontConfig to find the font by name</h3>
<div class="outline-text-3">
</div>
</div>

<div id="outline-container-maybe-add-a-nice-gradient-to-rendered-text" class="outline-3">
<h3 id="maybe-add-a-nice-gradient-to-rendered-text"><span class="todo TODO">TODO</span> Maybe add a nice gradient to rendered text?</h3>
</div>
</div>
<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2">
<p>
The code for this stream can be found here:
</p>

<p>
<a href="https://github.com/FluxHarmonic/flux-compose/commit/4f03833978ce75b1715fccf87a64d7ca33b16580">https://github.com/FluxHarmonic/flux-compose/commit/4f03833978ce75b1715fccf87a64d7ca33b16580</a>
</p>

<p>
<b>References</b>
</p>

<ul class="org-ul">
<li><a href="https://learnopengl.com/In-Practice/Text-Rendering">https://learnopengl.com/In-Practice/Text-Rendering</a></li>
<li>Getting fonts with FontConfig: <a href="https://stackoverflow.com/questions/10542832/how-to-use-fontconfig-to-get-font-list-c-c">https://stackoverflow.com/questions/10542832/how-to-use-fontconfig-to-get-font-list-c-c</a></li>
<li>Crafting Interpreters book: <a href="https://craftinginterpreters.com/">https://craftinginterpreters.com/</a></li>
</ul>
</div>
</div>

<div id="outline-container-next-steps" class="outline-2">
<h2 id="next-steps">Next Steps</h2>
<div class="outline-text-2" id="text-next-steps">
</div>
<div id="outline-container-investigate-using-harfbuzz-or-pango-to-get-proper-kerning-vectors-for-character-pairs" class="outline-3">
<h3 id="investigate-using-harfbuzz-or-pango-to-get-proper-kerning-vectors-for-character-pairs"><span class="todo TODO">TODO</span> Investigate using HarfBuzz (or Pango) to get proper kerning vectors for character pairs</h3>
</div>
<div id="outline-container-render-all-glyphs-to-a-single-texture-atlas-for-performance" class="outline-3">
<h3 id="render-all-glyphs-to-a-single-texture-atlas-for-performance"><span class="todo TODO">TODO</span> Render all glyphs to a single texture atlas for performance</h3>
</div>
<div id="outline-container-possibly-bake-a-texture-for-static-strings-to-reduce-draw-calls" class="outline-3">
<h3 id="possibly-bake-a-texture-for-static-strings-to-reduce-draw-calls"><span class="todo TODO">TODO</span> Possibly "bake" a texture for static strings to reduce draw calls</h3>
</div>
</div>
]]></description>
    </item>
    
    <item>
      <title>How Hard Can Text Rendering Really Be?</title>
      <link></link>
      <author>author@mail.com (Blog Author)</author>
      <guid isPermaLink="false"></guid>
      <pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate>
      <description><![CDATA[<p>
<b>Today's goal:</b> Lay the groundwork for TrueType font rendering!
</p>

<div id="outline-container-updates" class="outline-2">
<h2 id="updates">Updates</h2>
<div class="outline-text-2">
<ul class="org-ul">
<li>Created a Discord for Flux Harmonic: <a href="https://discord.gg/ryy97Rdw">https://discord.gg/ryy97Rdw</a></li>
<li>PNG saving now works (Thanks to <code>libspng</code>'s author Randy for stopping by!)</li>
<li>I added some code for rotating and scaling rendered textures</li>
<li>Also made the preview area center itself and be scalable</li>
</ul>
</div>
</div>

<div id="outline-container-rendering-truetype-fonts-with-opengl" class="outline-2">
<h2 id="rendering-truetype-fonts-with-opengl">Rendering TrueType fonts with OpenGL</h2>
<div class="outline-text-2">
<p>
Today we'll be using the long-lived FreeType library to load up a TrueType font so that we can extract glyphs for each letter, turn them into OpenGL textures, and render them to the screen.
</p>

<p>
Things we'll probably have to deal with:
</p>

<ul class="org-ul">
<li>Storing information about characters of different sizes</li>
<li>Kerning, to a basic degree (the space between characters)</li>
<li>Locating fonts by name using FontConfig (probably later)</li>
</ul>

<p>
We won't be adding things like text wrapping or alignment (yet), this code will just render a string from left to right.
</p>
</div>
</div>

<div id="outline-container-tasks" class="outline-2">
<h2 id="tasks">Tasks</h2>
<div class="outline-text-2" id="text-tasks">
</div>
<div id="outline-container-use-the-freetype-library-to-load-a-font" class="outline-3">
<h3 id="use-the-freetype-library-to-load-a-font"><span class="done DONE">DONE</span> Use the FreeType library to load a font</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-render-glyphs-to-opengl-textures" class="outline-3">
<h3 id="render-glyphs-to-opengl-textures"><span class="done DONE">DONE</span> Render glyphs to OpenGL textures</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-write-a-function-that-can-render-a-string-by-indexing-the-texture-for-each-letter" class="outline-3">
<h3 id="write-a-function-that-can-render-a-string-by-indexing-the-texture-for-each-letter"><span class="done DONE">DONE</span> Write a function that can render a string by indexing the texture for each letter</h3>
<div class="outline-text-3">
</div>
</div>
</div>

<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2">
<p>
The code for this stream can be found here:
</p>

<p>
<a href="https://github.com/FluxHarmonic/flux-compose/commit/2bbc4e0c65ec45bf974456250f368b28b72622bf">https://github.com/FluxHarmonic/flux-compose/commit/2bbc4e0c65ec45bf974456250f368b28b72622bf</a>
</p>

<p>
<b>References</b>
</p>

<ul class="org-ul">
<li><a href="https://learnopengl.com/In-Practice/Text-Rendering">https://learnopengl.com/In-Practice/Text-Rendering</a></li>
<li><a href="https://www.sccs.swarthmore.edu/users/03/sven/freetype_tut/">https://www.sccs.swarthmore.edu/users/03/sven/freetype_tut/</a></li>
<li><a href="https://github.com/rougier/freetype-gl">https://github.com/rougier/freetype-gl</a></li>
<li>Getting fonts with FontConfig: <a href="https://stackoverflow.com/questions/10542832/how-to-use-fontconfig-to-get-font-list-c-c">https://stackoverflow.com/questions/10542832/how-to-use-fontconfig-to-get-font-list-c-c</a></li>
</ul>
</div>
</div>

<div id="outline-container-next-steps" class="outline-2">
<h2 id="next-steps">Next Steps</h2>
<div class="outline-text-2" id="text-next-steps">
</div>
<div id="outline-container-find-out-how-to-make-the-text-white-instead-of-red" class="outline-3">
<h3 id="find-out-how-to-make-the-text-white-instead-of-red"><span class="todo TODO">TODO</span> Find out how to make the text white instead of red!</h3>
</div>
<div id="outline-container-improve-the-kerning-of-the-text-or-make-it-configurable" class="outline-3">
<h3 id="improve-the-kerning-of-the-text-or-make-it-configurable"><span class="todo TODO">TODO</span> Improve the kerning of the text (or make it configurable)</h3>
</div>
<div id="outline-container-maybe-add-a-nice-gradient-to-rendered-text" class="outline-3">
<h3 id="maybe-add-a-nice-gradient-to-rendered-text"><span class="todo TODO">TODO</span> Maybe add a nice gradient to rendered text?</h3>
</div>
<div id="outline-container-render-all-glyphs-to-a-single-texture-atlas-for-performance" class="outline-3">
<h3 id="render-all-glyphs-to-a-single-texture-atlas-for-performance"><span class="todo TODO">TODO</span> Render all glyphs to a single texture atlas for performance</h3>
</div>
<div id="outline-container-possibly-bake-a-texture-for-static-strings-to-reduce-draw-calls" class="outline-3">
<h3 id="possibly-bake-a-texture-for-static-strings-to-reduce-draw-calls"><span class="todo TODO">TODO</span> Possibly "bake" a texture for static strings to reduce draw calls</h3>
</div>
</div>
]]></description>
    </item>
    
    <item>
      <title>Loading and Saving Images</title>
      <link></link>
      <author>author@mail.com (Blog Author)</author>
      <guid isPermaLink="false"></guid>
      <pubDate>Thu, 27 Jan 2022 00:00:00 +0000</pubDate>
      <description><![CDATA[<p>
<b>Today's goal:</b> Get an image rendering on screen and save the composition to a file!
</p>

<div id="outline-container-updates" class="outline-2">
<h2 id="updates">Updates</h2>
<div class="outline-text-2">
<ul class="org-ul">
<li>I wired up <code>main.c</code> to load script files again!</li>
<li><b>Felipe</b> found a better way to store a handle to the <code>FluxWindow</code> with <code>GLFWwindow</code></li>
</ul>
</div>
</div>

<div id="outline-container-let-s-finally-start-handling-images" class="outline-2">
<h2 id="let-s-finally-start-handling-images">Let's finally start handling images</h2>
<div class="outline-text-2">
<p>
We'll use the <code>libspng</code> library or <code>lodepng</code> to decode a PNG file into an OpenGL texture and then render it to the screen.
</p>

<p>
Once we get that working, we'll try to render the screen to a PNG file, possibly with optimizations.  This will be an important step toward creating thumbnails with <code>flux-compose</code>!
</p>
</div>
</div>

<div id="outline-container-tasks" class="outline-2">
<h2 id="tasks">Tasks</h2>
<div class="outline-text-2" id="text-tasks">
</div>
<div id="outline-container-add-png-loading" class="outline-3">
<h3 id="add-png-loading"><span class="done DONE">DONE</span> Add PNG loading</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-render-an-image-texture-to-the-screen" class="outline-3">
<h3 id="render-an-image-texture-to-the-screen"><span class="done DONE">DONE</span> Render an image texture to the screen</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-see-if-we-can-render-the-opengl-context-back-to-a-png" class="outline-3">
<h3 id="see-if-we-can-render-the-opengl-context-back-to-a-png"><span class="todo TODO">TODO</span> See if we can render the OpenGL context back to a PNG</h3>
</div>
<div id="outline-container-automate-the-process-of-rendering-an-image-file-from-the-command-line" class="outline-3">
<h3 id="automate-the-process-of-rendering-an-image-file-from-the-command-line"><span class="todo TODO">TODO</span> Automate the process of rendering an image file from the command line</h3>
</div>
</div>

<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2">
<p>
The code for this stream can be found here:
<a href="https://github.com/FluxHarmonic/flux-compose/commit/29db69e81baf6ea81b8df61a6c15a1f84363f1ef">https://github.com/FluxHarmonic/flux-compose/commit/29db69e81baf6ea81b8df61a6c15a1f84363f1ef</a>
</p>

<ul class="org-ul">
<li>libspng: <a href="https://github.com/randy408/libspng">https://github.com/randy408/libspng</a></li>
<li>example.c: <a href="https://github.com/randy408/libspng/blob/v0.7.1/examples/example.c">https://github.com/randy408/libspng/blob/v0.7.1/examples/example.c</a></li>
<li>Load a PNG to texture: <a href="https://raw.githubusercontent.com/lvandeve/lodepng/master/examples/example_opengl.cpp">https://raw.githubusercontent.com/lvandeve/lodepng/master/examples/example_opengl.cpp</a></li>
<li>Save an PNG: <a href="https://raw.githubusercontent.com/lvandeve/lodepng/master/examples/example_encode.c">https://raw.githubusercontent.com/lvandeve/lodepng/master/examples/example_encode.c</a></li>
<li>Optimizing PNG size: <a href="https://raw.githubusercontent.com/lvandeve/lodepng/master/examples/example_optimize_png.cpp">https://raw.githubusercontent.com/lvandeve/lodepng/master/examples/example_optimize_png.cpp</a></li>
<li><a href="https://www.intel.com/content/www/us/en/developer/articles/technical/opengl-performance-tips-power-of-two-textures-have-better-performance.html">Power of 2 textures have better performance</a></li>
</ul>
</div>
</div>

<div id="outline-container-next-steps" class="outline-2">
<h2 id="next-steps">Next Steps</h2>
<div class="outline-text-2" id="text-next-steps">
</div>
<div id="outline-container-fix-rendering-of-opengl-context-to-a-png" class="outline-3">
<h3 id="fix-rendering-of-opengl-context-to-a-png"><span class="todo TODO">TODO</span> Fix rendering of OpenGL context to a PNG</h3>
</div>
<div id="outline-container-automate-the-process-of-rendering-an-image-file-from-the-command-line" class="outline-3">
<h3 id="automate-the-process-of-rendering-an-image-file-from-the-command-line"><span class="todo TODO">TODO</span> Automate the process of rendering an image file from the command line</h3>
</div>
</div>
]]></description>
    </item>
    
    <item>
      <title>Improving the Graphics Layer</title>
      <link></link>
      <author>author@mail.com (Blog Author)</author>
      <guid isPermaLink="false"></guid>
      <pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate>
      <description><![CDATA[<p>
<b>Today's goal:</b> Switch from SDL2 to GLFW and get something rendering!
</p>

<div id="outline-container-updates" class="outline-2">
<h2 id="updates">Updates</h2>
<div class="outline-text-2">
<ul class="org-ul">
<li>Special thanks to <b>Felipe Balbi</b> for spending a lot of time improving the quality of the code and build!</li>
</ul>
</div>
</div>

<div id="outline-container-switching-to-glfw" class="outline-2">
<h2 id="switching-to-glfw">Switching to GLFW</h2>
<div class="outline-text-2">
<p>
Today we're going to spend some time moving the graphics layer from SDL2 to GLFW.
</p>

<p>
At some point we might even get rid of GLFW, but we'll stick with this path for a while :)
</p>

<p>
<b>Benefits</b>
</p>

<ul class="org-ul">
<li>Direct access to OpenGL rendering APIs without bringing in everything else SDL2 offers</li>
<li>No unnecessary code for playing sounds and other game-specific functionality</li>
<li>We can write our own APIs that wrap what GLFW and OpenGL provide</li>
</ul>

<p>
<b>Drawbacks</b>
</p>

<ul class="org-ul">
<li>Have to write our own image loading code</li>
<li>Have to write our own font handling code</li>
<li>Have to write optimized rendering routines</li>
</ul>

<p>
But as I've said before, <i>that's the point</i> :)
</p>
</div>
</div>

<div id="outline-container-tasks" class="outline-2">
<h2 id="tasks">Tasks</h2>
<div class="outline-text-2" id="text-tasks">
</div>
<div id="outline-container-figure-out-a-good-pattern-for-starting-the-render-event-loop" class="outline-3">
<h3 id="figure-out-a-good-pattern-for-starting-the-render-event-loop"><span class="done DONE">DONE</span> Figure out a good pattern for starting the render/event loop</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-add-basic-event-loop" class="outline-3">
<h3 id="add-basic-event-loop"><span class="done DONE">DONE</span> Add basic event loop</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-add-screen-clearing-function" class="outline-3">
<h3 id="add-screen-clearing-function"><span class="done DONE">DONE</span> Add screen clearing function</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-add-rect-rendering-function" class="outline-3">
<h3 id="add-rect-rendering-function"><span class="done DONE">DONE</span> Add rect rendering function</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-delete-sdl2-code-and-dependencies" class="outline-3">
<h3 id="delete-sdl2-code-and-dependencies"><span class="done DONE">DONE</span> Delete SDL2 code and dependencies</h3>
<div class="outline-text-3">
</div>
</div>
</div>
<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2">
<p>
The code for this stream can be found here:
<a href="https://github.com/FluxHarmonic/flux-compose/commit/6c53c3893dcd9e224c71cb7658575fe440783aad">https://github.com/FluxHarmonic/flux-compose/commit/6c53c3893dcd9e224c71cb7658575fe440783aad</a>
</p>

<ul class="org-ul">
<li><a href="https://www.glfw.org/docs/latest/quick_guide.html">GLFW Getting Started</a></li>
</ul>
</div>
</div>

<div id="outline-container-next-steps" class="outline-2">
<h2 id="next-steps">Next Steps</h2>
<div class="outline-text-2" id="text-next-steps">
</div>
<div id="outline-container-try-to-add-png-loading-rendering" class="outline-3">
<h3 id="try-to-add-png-loading-rendering"><span class="todo TODO">TODO</span> Try to add PNG loading/rendering</h3>
</div>
<div id="outline-container-see-if-we-can-render-the-opengl-context-back-to-a-png" class="outline-3">
<h3 id="see-if-we-can-render-the-opengl-context-back-to-a-png"><span class="todo TODO">TODO</span> See if we can render the OpenGL context back to a PNG</h3>
</div>
<div id="outline-container-maybe-add-sigterm-handler-for-cleaning-up-graphics-resources" class="outline-3">
<h3 id="maybe-add-sigterm-handler-for-cleaning-up-graphics-resources"><span class="todo TODO">TODO</span> (Maybe) Add SIGTERM handler for cleaning up graphics resources</h3>
</div>
</div>
]]></description>
    </item>
    
    <item>
      <title>The Return of the Circles</title>
      <link></link>
      <author>author@mail.com (Blog Author)</author>
      <guid isPermaLink="false"></guid>
      <pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate>
      <description><![CDATA[<p>
<b>Today's goal:</b> wire up the scripting language enough to get our circles rendering again!
</p>

<div id="outline-container-updates" class="outline-2">
<h2 id="updates">Updates</h2>
<div class="outline-text-2">
<p>
Starting next week, the Tuesday / Thursday streams will start at <b>3PM UTC</b> and run for <b>2 hours</b> each!
</p>

<p>
I'm still experimenting with how to make the streams and channel more interesting and sustainable.  I'd love to hear your feedback!
</p>
</div>
</div>

<div id="outline-container-tasks" class="outline-2">
<h2 id="tasks">Tasks</h2>
<div class="outline-text-2" id="text-tasks">
</div>
<div id="outline-container-finish-porting-parser-to-vector-api" class="outline-3">
<h3 id="finish-porting-parser-to-vector-api"><span class="done DONE">DONE</span> Finish porting parser to vector API</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-simplify-finding-keyword-name-value-pairs-in-function-calls" class="outline-3">
<h3 id="simplify-finding-keyword-name-value-pairs-in-function-calls"><span class="todo TODO">TODO</span> Simplify finding keyword name/value pairs in function calls</h3>
</div>
<div id="outline-container-finish-porting-previous-guile-interface-code-over-to-the-new-language" class="outline-3">
<h3 id="finish-porting-previous-guile-interface-code-over-to-the-new-language"><span class="todo TODO">TODO</span> Finish porting previous Guile interface code over to the new language</h3>
</div>
<div id="outline-container-finish-writing-the-render-to-file-function" class="outline-3">
<h3 id="finish-writing-the-render-to-file-function"><span class="todo TODO">TODO</span> Finish writing the <code>render-to-file</code> function</h3>
</div>
<div id="outline-container-get-back-to-the-tasks-from-the-previous-streams" class="outline-3">
<h3 id="get-back-to-the-tasks-from-the-previous-streams"><span class="todo TODO">TODO</span> Get back to the tasks from the previous streams!</h3>
</div>
</div>


<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2">
<p>
Code for this stream is here:
<a href="https://github.com/FluxHarmonic/flux-compose/commit/8d80270e1274513ba246c4dee92aa7518485e7cc">https://github.com/FluxHarmonic/flux-compose/commit/8d80270e1274513ba246c4dee92aa7518485e7cc</a>
</p>
</div>
</div>

<div id="outline-container-next-steps" class="outline-2">
<h2 id="next-steps">Next Steps</h2>
<div class="outline-text-2">
<p>
Next time we'll take a break from the scripting side of things and talk about converting the app to use GLFW and raw OpenGL instead of SDL2.
</p>
</div>
</div>
]]></description>
    </item>
    
    <item>
      <title>Wiring Up the Scripting Language</title>
      <link></link>
      <author>author@mail.com (Blog Author)</author>
      <guid isPermaLink="false"></guid>
      <pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate>
      <description><![CDATA[
<div id="outline-container-updates" class="outline-2">
<h2 id="updates">Updates</h2>
<div class="outline-text-2">
<p>
I took some time to squash some bugs and clean up some of the scripting language code since last stream!
</p>

<p>
We're now in a solid place to start from today.
</p>
</div>

<div id="outline-container-offline-tasks" class="outline-3">
<h3 id="offline-tasks">Offline Tasks</h3>
<div class="outline-text-3" id="text-offline-tasks">
</div>
<div id="outline-container-use-gdb-watch-to-figure-out-why-token-kinds-are-being-overwritten" class="outline-4">
<h4 id="use-gdb-watch-to-figure-out-why-token-kinds-are-being-overwritten">Use gdb watch to figure out why token kinds are being overwritten</h4>
</div>
<div id="outline-container-clean-up-some-of-the-repeated-patterns-in-the-code" class="outline-4">
<h4 id="clean-up-some-of-the-repeated-patterns-in-the-code">Clean up some of the repeated patterns in the code</h4>
</div>
<div id="outline-container-fix-issue-with-setting-integer-values" class="outline-4">
<h4 id="fix-issue-with-setting-integer-values">Fix issue with setting integer values</h4>
</div>
<div id="outline-container-verify-that-call-expression-eval-from-last-time-works-after-fixes" class="outline-4">
<h4 id="verify-that-call-expression-eval-from-last-time-works-after-fixes">Verify that call expression eval from last time works after fixes</h4>
</div>
<div id="outline-container-write-flux-vector-library-and-move-tokenizer-code-over-to-it" class="outline-4">
<h4 id="write-flux-vector-library-and-move-tokenizer-code-over-to-it">Write <code>flux_vector</code> library and move tokenizer code over to it</h4>
</div>
</div>
</div>

<div id="outline-container-some-thoughts-on-c" class="outline-2">
<h2 id="some-thoughts-on-c">Some Thoughts on C</h2>
<div class="outline-text-2">
<p>
After dabbling with C on and off over the last couple of years and then spending a lot more time learning and using it recently, I've had the following thoughts:
</p>

<ul class="org-ul">
<li>Immense power that requires good practices and tools</li>
<li>It seems possible to design decent abstractions</li>
<li>Possibly the most portable and transferrable language</li>
<li>A fantastic basis for building your own platform or "universe"</li>
<li>It does more than you think it does, but with the right balance of abstraction</li>
<li>I <i>really</i> want to master this language</li>
</ul>
</div>
</div>

<div id="outline-container-tasks" class="outline-2">
<h2 id="tasks">Tasks</h2>
<div class="outline-text-2" id="text-tasks">
</div>
<div id="outline-container-evaluate-call-expressions" class="outline-3">
<h3 id="evaluate-call-expressions"><span class="done DONE">DONE</span> Evaluate call expressions</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-add-a-basic-repl-interface-for-live-evaluation" class="outline-3">
<h3 id="add-a-basic-repl-interface-for-live-evaluation"><span class="done DONE">DONE</span> Add a basic REPL interface for live evaluation</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-hook-up-the-repl-to-emacs" class="outline-3">
<h3 id="hook-up-the-repl-to-emacs"><span class="done DONE">DONE</span> Hook up the REPL to Emacs</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-port-previous-guile-interface-code-over-to-the-new-language" class="outline-3">
<h3 id="port-previous-guile-interface-code-over-to-the-new-language"><span class="todo TODO">TODO</span> Port previous Guile interface code over to the new language</h3>
</div>
<div id="outline-container-finish-writing-the-render-to-file-function" class="outline-3">
<h3 id="finish-writing-the-render-to-file-function"><span class="todo TODO">TODO</span> Finish writing the <code>render-to-file</code> function</h3>
</div>
<div id="outline-container-get-back-to-the-tasks-from-the-previous-streams" class="outline-3">
<h3 id="get-back-to-the-tasks-from-the-previous-streams"><span class="todo TODO">TODO</span> Get back to the tasks from the previous streams!</h3>
</div>
</div>

<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2">
<p>
Code for this stream is here:
<a href="https://github.com/FluxHarmonic/flux-compose/commit/1e67cf3d1b1c0de27271228cded824486294e34a">https://github.com/FluxHarmonic/flux-compose/commit/1e67cf3d1b1c0de27271228cded824486294e34a</a>
</p>
</div>
</div>

<div id="outline-container-next-steps" class="outline-2">
<h2 id="next-steps">Next Steps</h2>
<div class="outline-text-2" id="text-next-steps">
</div>
<div id="outline-container-simplify-finding-keyword-name-value-pairs-in-function-calls" class="outline-3">
<h3 id="simplify-finding-keyword-name-value-pairs-in-function-calls"><span class="todo TODO">TODO</span> Simplify finding keyword name/value pairs in function calls</h3>
</div>
<div id="outline-container-finish-porting-previous-guile-interface-code-over-to-the-new-language" class="outline-3">
<h3 id="finish-porting-previous-guile-interface-code-over-to-the-new-language"><span class="todo TODO">TODO</span> Finish porting previous Guile interface code over to the new language</h3>
</div>
<div id="outline-container-finish-writing-the-render-to-file-function" class="outline-3">
<h3 id="finish-writing-the-render-to-file-function"><span class="todo TODO">TODO</span> Finish writing the <code>render-to-file</code> function</h3>
</div>
<div id="outline-container-get-back-to-the-tasks-from-the-previous-streams" class="outline-3">
<h3 id="get-back-to-the-tasks-from-the-previous-streams"><span class="todo TODO">TODO</span> Get back to the tasks from the previous streams!</h3>
</div>
</div>
]]></description>
    </item>
    
    <item>
      <title>Creating a Scripting Language in 5 Days</title>
      <link></link>
      <author>author@mail.com (Blog Author)</author>
      <guid isPermaLink="false"></guid>
      <pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate>
      <description><![CDATA[<p>
Today's goal: Replace Guile with a custom scripting language!
</p>

<p>
<div class="embed-responsive embed-responsive-16by9"> <iframe class="embed-responsive-item" src="https://www.youtube.com/embed/2KdBbEtqpY0" allowfullscreen></iframe> </div>
</p>

<div id="outline-container-why-create-a-language" class="outline-2">
<h2 id="why-create-a-language">Why create a language?</h2>
<div class="outline-text-2">
<p>
After the amount of time we've spent fighting with Guile Scheme to invoke C functions correctly, I started thinking about whether it would make sense to switch to a different Scheme implementation like Chibi.
</p>

<p>
But then it occurred to me: if I'm only using Scheme as a control language that binds to the C layer, why use a full language for that?
</p>

<p>
So this weekend I had a crazy idea: create my own Scheme-inspired control language that will be purpose-built for this project.  I won't actually call it a scripting language yet because we're going to avoid adding control flow and other typical language features as long as we can!
</p>

<p>
Another benefit is that I get complete control over memory management and how code execution is integrated with the runtime.  We might not need a separate execution thread anymore!
</p>

<p>
And of course the most important reason: <i>because it's fun</i>!
</p>
</div>
</div>

<div id="outline-container-language-design" class="outline-2">
<h2 id="language-design">Language design</h2>
<div class="outline-text-2">
<p>
Since this language is being created specifically for this project, we get to choose how it works.  More importantly, we get to choose what <i>not</i> to implement!
</p>

<p>
<b>What do we really need?</b>
</p>

<ul class="org-ul">
<li>Specific set of primitive data types (string, integer, float, time, list)</li>
<li>Invoke C functions, declare bindings in a convenient way</li>
<li>Limited concept of scope for now, only module scope</li>
<li>Make sure the language enables an interactive workflow (REPL, eval-able constructs)</li>
<li>Ability to send individual commands from the editor (preview, transport control, project change)</li>
</ul>

<p>
<b>What we don't need (for now)</b>
</p>

<ul class="org-ul">
<li>Logic constructs and control flow</li>
<li>Functions and lexical scoping</li>
<li>Data structure definitions (complex data structures created via C functions)</li>
<li>Macros (but maybe later if it makes sense)</li>
<li>Library modules defined in the language (this will likely change, though)</li>
</ul>

<p>
This is more than just a data format!  Since we can invoke functions in the C layer, it also allows us to automate behavior where necessary.
</p>
</div>
</div>

<div id="outline-container-an-example" class="outline-2">
<h2 id="an-example">An example</h2>
<div class="outline-text-2">
<p>
This code snippet demonstrates some of the ideas I have in mind:
</p>

<ul class="org-ul">
<li>Symbol in first position of a list is always a function to be called, defined in C</li>
<li>Functions will often be called with keyword arguments, but can also have positional args</li>
<li>Time will be a first-class concept in the syntax</li>
</ul>

<div class="org-src-container">
<pre class="src src-scheme">
(define font-jost (font :family "Jost*" :weight 'medium))

(define moving-circles
  (scene :members
	 (list (circle :name 'circle1
		       :x 200
		       :y 500
		       :color (rgb 255 0 0)))

	 :timeline
	 (list (event :at 0:05
		      :actions (list (move :target 'circle1
					   :to (pos 400 200)
					   :for 150ms
					   :ease 'out)))
	       (event :at 0:10
		      :actions (list (fade :target 'circle1
					   :for 1000ms)))))

(scene-preview moving-circles)

</pre>
</div>
</div>
</div>

<div id="outline-container-tasks" class="outline-2">
<h2 id="tasks">Tasks</h2>
<div class="outline-text-2" id="text-tasks">
</div>
<div id="outline-container-implement-basic-evaluation-of-expressions" class="outline-3">
<h3 id="implement-basic-evaluation-of-expressions"><span class="done DONE">DONE</span> Implement basic evaluation of expressions</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-enable-special-form-function-registration" class="outline-3">
<h3 id="enable-special-form-function-registration"><span class="todo TODO">TODO</span> Enable special form (function) registration</h3>
</div>
<div id="outline-container-fix-issue-with-setting-integer-values" class="outline-3">
<h3 id="fix-issue-with-setting-integer-values"><span class="todo TODO">TODO</span> Fix issue with setting integer values</h3>
</div>
<div id="outline-container-evaluate-call-expressions" class="outline-3">
<h3 id="evaluate-call-expressions"><span class="todo TODO">TODO</span> Evaluate call expressions</h3>
</div>
<div id="outline-container-port-previous-guile-interface-code-over-to-the-new-language" class="outline-3">
<h3 id="port-previous-guile-interface-code-over-to-the-new-language"><span class="todo TODO">TODO</span> Port previous Guile interface code over to the new language</h3>
</div>
<div id="outline-container-finish-writing-the-render-to-file-function" class="outline-3">
<h3 id="finish-writing-the-render-to-file-function"><span class="todo TODO">TODO</span> Finish writing the <code>render-to-file</code> function</h3>
</div>
</div>

<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2">
<p>
Here is the commit for what we accomplished today: <a href="https://github.com/FluxHarmonic/flux-compose/commit/dd3e2ccf8e30f94acc4808dfe5c120066b6afbc7">https://github.com/FluxHarmonic/flux-compose/commit/dd3e2ccf8e30f94acc4808dfe5c120066b6afbc7</a>
</p>

<p>
Documentation on setting watchpoints in memory with gdb: <a href="https://sourceware.org/gdb/download/onlinedocs/gdb/Set-Watchpoints.html">https://sourceware.org/gdb/download/onlinedocs/gdb/Set-Watchpoints.html</a>
</p>
</div>
</div>

<div id="outline-container-next-steps" class="outline-2">
<h2 id="next-steps">Next Steps</h2>
<div class="outline-text-2" id="text-next-steps">
</div>
<div id="outline-container-clean-up-some-of-the-repeated-patterns-in-the-code" class="outline-3">
<h3 id="clean-up-some-of-the-repeated-patterns-in-the-code"><span class="todo TODO">TODO</span> Clean up some of the repeated patterns in the code</h3>
</div>
<div id="outline-container-use-gdb-watch-to-figure-out-why-token-kinds-are-being-overwritten" class="outline-3">
<h3 id="use-gdb-watch-to-figure-out-why-token-kinds-are-being-overwritten"><span class="todo TODO">TODO</span> Use gdb watch to figure out why token kinds are being overwritten</h3>
</div>
<div id="outline-container-enable-special-form-function-registration" class="outline-3">
<h3 id="enable-special-form-function-registration"><span class="todo TODO">TODO</span> Enable special form (function) registration</h3>
</div>
<div id="outline-container-fix-issue-with-setting-integer-values" class="outline-3">
<h3 id="fix-issue-with-setting-integer-values"><span class="todo TODO">TODO</span> Fix issue with setting integer values</h3>
</div>
<div id="outline-container-evaluate-call-expressions" class="outline-3">
<h3 id="evaluate-call-expressions"><span class="todo TODO">TODO</span> Evaluate call expressions</h3>
</div>
<div id="outline-container-port-previous-guile-interface-code-over-to-the-new-language" class="outline-3">
<h3 id="port-previous-guile-interface-code-over-to-the-new-language"><span class="todo TODO">TODO</span> Port previous Guile interface code over to the new language</h3>
</div>
<div id="outline-container-finish-writing-the-render-to-file-function" class="outline-3">
<h3 id="finish-writing-the-render-to-file-function"><span class="todo TODO">TODO</span> Finish writing the <code>render-to-file</code> function</h3>
</div>
<div id="outline-container-get-back-to-the-tasks-from-the-previous-stream" class="outline-3">
<h3 id="get-back-to-the-tasks-from-the-previous-stream"><span class="todo TODO">TODO</span> Get back to the tasks from the previous stream!</h3>
</div>
</div>
]]></description>
    </item>
    
    <item>
      <title>Creating Our First Image</title>
      <link></link>
      <author>author@mail.com (Blog Author)</author>
      <guid isPermaLink="false"></guid>
      <pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate>
      <description><![CDATA[<p>
Today's goal: create a basic image and render it to a PNG file!
</p>

<p>
<a href="https://youtu.be/8TdaQhoxqeQ">Watch the recording</a> on YouTube!
</p>

<div id="outline-container-updates" class="outline-2">
<h2 id="updates">Updates</h2>
<div class="outline-text-2">
<ul class="org-ul">
<li>Thanks to Ashraz, we now have lsp-mode (and eglot) working for the C code!</li>
<li>Project Makefiles are now generated by CMake</li>
<li>The generated <code>compile_commands.json</code> feeds <code>ccls</code> information about where project dependencies are</li>
</ul>
</div>
</div>

<div id="outline-container-looking-ahead" class="outline-2">
<h2 id="looking-ahead">Looking Ahead</h2>
<div class="outline-text-2">
<ul class="org-ul">
<li>I <i>really</i> want to abandon SDL2 as soon as I can</li>
<li>Write my own rendering layer with OpenGL and shaders</li>
<li>My goal is to use GLFW to set up rendering context, event loop, and input</li>
<li>The plan: get some things working in SDL2 to validate the model, then drop it</li>
</ul>
</div>
</div>

<div id="outline-container-tasks" class="outline-2">
<h2 id="tasks">Tasks</h2>
<div class="outline-text-2" id="text-tasks">
</div>
<div id="outline-container-figure-out-why-scene-flipping-doesn-t-work-event-problem" class="outline-3">
<h3 id="figure-out-why-scene-flipping-doesn-t-work-event-problem"><span class="done DONE">DONE</span> Figure out why scene flipping doesn't work (event problem?)</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-flesh-out-the-approach-for-calling-c-functions-to-communicate-scene-data" class="outline-3">
<h3 id="flesh-out-the-approach-for-calling-c-functions-to-communicate-scene-data"><span class="done DONE">DONE</span> Flesh out the approach for calling C functions to communicate scene data</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-make-sure-that-we-can-re-eval-the-scheme-code-to-update-the-live-preview" class="outline-3">
<h3 id="make-sure-that-we-can-re-eval-the-scheme-code-to-update-the-live-preview"><span class="done DONE">DONE</span> Make sure that we can re-eval the Scheme code to update the live preview</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-render-the-image-to-a-png-file" class="outline-3">
<h3 id="render-the-image-to-a-png-file"><span class="done DONE">DONE</span> Render the image to a .png file</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-write-a-function-that-can-convert-html-style-hex-colors-to-rgba" class="outline-3">
<h3 id="write-a-function-that-can-convert-html-style-hex-colors-to-rgba"><span class="todo TODO">TODO</span> Write a function that can convert HTML-style hex colors to RGBA</h3>
</div>
<div id="outline-container-load-and-render-an-image-file" class="outline-3">
<h3 id="load-and-render-an-image-file"><span class="todo TODO">TODO</span> Load and render an image file</h3>
</div>
<div id="outline-container-figure-out-how-to-render-basic-text-on-the-image" class="outline-3">
<h3 id="figure-out-how-to-render-basic-text-on-the-image"><span class="todo TODO">TODO</span> Figure out how to render basic text on the image</h3>
</div>

<div id="outline-container-try-to-clean-up-the-old-scene-memory-when-it-s-no-longer-needed" class="outline-3">
<h3 id="try-to-clean-up-the-old-scene-memory-when-it-s-no-longer-needed"><span class="todo TODO">TODO</span> Try to clean up the old scene memory when it's no longer needed</h3>
</div>
</div>

<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2">
<ul class="org-ul">
<li>Creating a "screenshot" of an SDL2 renderer: <a href="https://gist.github.com/malja/2193bd656fe50c203f264ce554919976">https://gist.github.com/malja/2193bd656fe50c203f264ce554919976</a></li>
</ul>
</div>
</div>

<div id="outline-container-results" class="outline-2">
<h2 id="results">Results</h2>
<div class="outline-text-2">
<p>
Here's the image we were able to save today:
</p>

<p>
<img src="https://fluxharmonic.com/static/results/2022-01-06.png" alt="Result image" />
</p>

<p>
Here is the commit for the code changes from today:
</p>

<p>
<a href="https://github.com/FluxHarmonic/flux-compose/commit/9ea27cdf2cf4940bd09356f8a12f1c9c702f86cf">https://github.com/FluxHarmonic/flux-compose/commit/9ea27cdf2cf4940bd09356f8a12f1c9c702f86cf</a>
</p>
</div>
</div>

<div id="outline-container-next-steps" class="outline-2">
<h2 id="next-steps">Next Steps</h2>
<div class="outline-text-2" id="text-next-steps">
</div>
<div id="outline-container-figure-out-why-the-window-isn-t-the-correct-size" class="outline-3">
<h3 id="figure-out-why-the-window-isn-t-the-correct-size"><span class="todo TODO">TODO</span> Figure out why the window isn't the correct size</h3>
</div>
<div id="outline-container-figure-out-how-to-convert-scheme-string-to-null-terminated-bytevector" class="outline-3">
<h3 id="figure-out-how-to-convert-scheme-string-to-null-terminated-bytevector"><span class="todo TODO">TODO</span> Figure out how to convert Scheme string to null-terminated bytevector</h3>
</div>
<div id="outline-container-finish-writing-function-that-can-convert-html-style-hex-colors-to-rgba" class="outline-3">
<h3 id="finish-writing-function-that-can-convert-html-style-hex-colors-to-rgba"><span class="todo TODO">TODO</span> Finish writing function that can convert HTML-style hex colors to RGBA</h3>
</div>
<div id="outline-container-load-and-render-an-image-file" class="outline-3">
<h3 id="load-and-render-an-image-file"><span class="todo TODO">TODO</span> Load and render an image file</h3>
</div>
<div id="outline-container-figure-out-how-to-render-basic-text-on-the-image" class="outline-3">
<h3 id="figure-out-how-to-render-basic-text-on-the-image"><span class="todo TODO">TODO</span> Figure out how to render basic text on the image</h3>
</div>
<div id="outline-container-try-to-clean-up-the-old-scene-memory-when-it-s-no-longer-needed" class="outline-3">
<h3 id="try-to-clean-up-the-old-scene-memory-when-it-s-no-longer-needed"><span class="todo TODO">TODO</span> Try to clean up the old scene memory when it's no longer needed</h3>
</div>
</div>
]]></description>
    </item>
    
    <item>
      <title>Encoding the Scene</title>
      <link></link>
      <author>author@mail.com (Blog Author)</author>
      <guid isPermaLink="false"></guid>
      <pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate>
      <description><![CDATA[
<div id="outline-container-updates" class="outline-2">
<h2 id="updates">Updates</h2>
<div class="outline-text-2">
<ul class="org-ul">
<li>Recieved a few issues and pull requests, thanks Christian and Felipe!</li>
<li>Improved the README with basic hacking instructions</li>
<li>Moved <code>lib</code> code, improved <code>Makefiles</code></li>
<li>Considered Zig this weekend, will stick with C for now</li>
<li>Didn't get the summary video out this week!</li>
</ul>
</div>
</div>

<div id="outline-container-encoding-c-structs-from-scheme" class="outline-2">
<h2 id="encoding-c-structs-from-scheme">Encoding C structs from Scheme</h2>
<div class="outline-text-2">
<ul class="org-ul">
<li>Structs are laid out contiguously</li>
<li>Do we need to worry about memory alignment?</li>
<li>What about nested data?</li>
</ul>
</div>
</div>

<div id="outline-container-tasks" class="outline-2">
<h2 id="tasks">Tasks</h2>
<div class="outline-text-2" id="text-tasks">
</div>
<div id="outline-container-try-to-finish-instantiating-a-test-scene-in-c-try-felipe-s-fix" class="outline-3">
<h3 id="try-to-finish-instantiating-a-test-scene-in-c-try-felipe-s-fix"><span class="done DONE">DONE</span> Try to finish instantiating a test scene in C (try Felipe's fix)</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-figure-out-how-to-create-the-c-struct-representation-for-scene-objects-in-scheme" class="outline-3">
<h3 id="figure-out-how-to-create-the-c-struct-representation-for-scene-objects-in-scheme"><span class="done DONE">DONE</span> Figure out how to create the C struct representation for scene objects in Scheme</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-get-the-basic-gfx-scm-example-working" class="outline-3">
<h3 id="get-the-basic-gfx-scm-example-working"><span class="done DONE">DONE</span> Get the <code>basic-gfx.scm</code> example working</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-transmit-drawing-instructions-to-renderer-thread-in-some-form-sdl-event" class="outline-3">
<h3 id="transmit-drawing-instructions-to-renderer-thread-in-some-form-sdl-event"><span class="todo TODO">TODO</span> Transmit drawing instructions to renderer thread in some form (SDL event?)</h3>
</div>
<div id="outline-container-make-sure-that-we-can-re-eval-the-scheme-code-to-update-the-live-preview" class="outline-3">
<h3 id="make-sure-that-we-can-re-eval-the-scheme-code-to-update-the-live-preview"><span class="todo TODO">TODO</span> Make sure that we can re-eval the Scheme code to update the live preview</h3>
</div>
<div id="outline-container-render-the-completed-image-to-a-png-file" class="outline-3">
<h3 id="render-the-completed-image-to-a-png-file"><span class="todo TODO">TODO</span> Render the completed image to a .png file</h3>
</div>
<div id="outline-container-load-and-render-an-image-file" class="outline-3">
<h3 id="load-and-render-an-image-file"><span class="todo TODO">TODO</span> Load and render an image file</h3>
</div>
</div>

<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2">
<ul class="org-ul">
<li><a href="https://www.youtube.com/watch?v=443UNeGrFoM">Video: How I Write C (Highly Recommended)</a></li>
<li><a href="https://wiki.libsdl.org/SDL_PushEvent">https://wiki.libsdl.org/SDL_PushEvent</a></li>
</ul>

<p>
The commit for the code from this stream:
<a href="https://github.com/FluxHarmonic/flux-compose/commit/d4e4d3f849784a23669b27349d767ee503acfe6a">https://github.com/FluxHarmonic/flux-compose/commit/d4e4d3f849784a23669b27349d767ee503acfe6a</a>
</p>
</div>
</div>

<div id="outline-container-next-steps" class="outline-2">
<h2 id="next-steps">Next Steps</h2>
<div class="outline-text-2" id="text-next-steps">
</div>
<div id="outline-container-figure-out-why-scene-flipping-doesn-t-work-event-problem" class="outline-3">
<h3 id="figure-out-why-scene-flipping-doesn-t-work-event-problem"><span class="todo TODO">TODO</span> Figure out why scene flipping doesn't work (event problem?)</h3>
</div>
<div id="outline-container-transmit-drawing-instructions-to-renderer-thread-in-some-form" class="outline-3">
<h3 id="transmit-drawing-instructions-to-renderer-thread-in-some-form"><span class="todo TODO">TODO</span> Transmit drawing instructions to renderer thread in some form</h3>
</div>
<div id="outline-container-make-sure-that-we-can-re-eval-the-scheme-code-to-update-the-live-preview" class="outline-3">
<h3 id="make-sure-that-we-can-re-eval-the-scheme-code-to-update-the-live-preview"><span class="todo TODO">TODO</span> Make sure that we can re-eval the Scheme code to update the live preview</h3>
</div>
<div id="outline-container-render-the-completed-image-to-a-png-file" class="outline-3">
<h3 id="render-the-completed-image-to-a-png-file"><span class="todo TODO">TODO</span> Render the completed image to a .png file</h3>
</div>
<div id="outline-container-load-and-render-an-image-file" class="outline-3">
<h3 id="load-and-render-an-image-file"><span class="todo TODO">TODO</span> Load and render an image file</h3>
</div>
</div>
]]></description>
    </item>
    
    <item>
      <title>Creating the Graphics Layer</title>
      <link></link>
      <author>author@mail.com (Blog Author)</author>
      <guid isPermaLink="false"></guid>
      <pubDate>Thu, 30 Dec 2021 00:00:00 +0000</pubDate>
      <description><![CDATA[<p>
View the code: <a href="https://github.com/FluxHarmonic/flux-compose">https://github.com/FluxHarmonic/flux-compose</a>
</p>

<div id="outline-container-schedule-change" class="outline-2">
<h2 id="schedule-change">Schedule Change!</h2>
<div class="outline-text-2">
<p>
Starting <b>next week</b> I'm moving the stream start time forward by one hour.
</p>

<p>
Streams will now be <b>Tuesday and Thursday, 2PM - 5PM UTC</b>!
</p>
</div>
</div>

<div id="outline-container-graphics-layer-design" class="outline-2">
<h2 id="graphics-layer-design">Graphics Layer Design</h2>
<div class="outline-text-2">
<p>
Let's continue with the idea we came up with last time to see how far we can take it:
</p>

<ul class="org-ul">
<li>Use a <a href="https://en.wikipedia.org/wiki/Retained_mode">retained mode</a> rendering model</li>
<li>Describe the graphics to be rendered in the Scheme layer</li>
<li>The C layer will interpret and render the complete scene or instruction list efficiently</li>
<li>The Scheme layer can replace the graphics instructions at any time (REPL-based "drawing")</li>
<li>Animations will eventually be possible by describing changes to elements in the scene over time</li>
</ul>

<p>
The goal today is to get some basic things rendering in a preview window and <i>possibly</i> save it out to a .png file.
</p>
</div>
</div>

<div id="outline-container-tasks" class="outline-2">
<h2 id="tasks">Tasks</h2>
<div class="outline-text-2">
<p>
Here's what I'd like to accomplish today:
</p>
</div>

<div id="outline-container-rename-the-project-to-flux-compose" class="outline-3">
<h3 id="rename-the-project-to-flux-compose"><span class="done DONE">DONE</span> Rename the project to <code>flux-compose</code></h3>
<div class="outline-text-3">
</div>
</div>

<div id="outline-container-create-a-shared-library-for-core-c-code" class="outline-3">
<h3 id="create-a-shared-library-for-core-c-code"><span class="done DONE">DONE</span> Create a shared library for core C code</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-try-a-ffi-approach-for-calling-c-functions-from-a-shared-library" class="outline-3">
<h3 id="try-a-ffi-approach-for-calling-c-functions-from-a-shared-library"><span class="done DONE">DONE</span> Try a FFI approach for calling C functions from a shared library</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-get-the-screen-clearing" class="outline-3">
<h3 id="get-the-screen-clearing"><span class="done DONE">DONE</span> Get the screen clearing</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-find-a-faster-way-to-iterate-on-the-native-layer" class="outline-3">
<h3 id="find-a-faster-way-to-iterate-on-the-native-layer"><span class="done DONE">DONE</span> Find a faster way to iterate on the native layer</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-get-something-simple-rendering-in-the-c-code" class="outline-3">
<h3 id="get-something-simple-rendering-in-the-c-code"><span class="done DONE">DONE</span> Get something simple rendering in the C code</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-figure-out-why-init-graphics-is-crashing-the-process-can-we-come-up-with-a-good-debugging-strategy-running-via-gdb" class="outline-3">
<h3 id="figure-out-why-init-graphics-is-crashing-the-process-can-we-come-up-with-a-good-debugging-strategy-running-via-gdb"><span class="done DONE">DONE</span> Figure out why <code>init-graphics</code> is crashing the process, can we come up with a good debugging strategy (running via gdb)</h3>
<div class="outline-text-3">
</div>
</div>

<div id="outline-container-transmit-drawing-instructions-to-renderer-thread-in-some-form" class="outline-3">
<h3 id="transmit-drawing-instructions-to-renderer-thread-in-some-form"><span class="todo TODO">TODO</span> Transmit drawing instructions to renderer thread in some form</h3>
</div>
<div id="outline-container-get-the-basic-gfx-scm-example-working" class="outline-3">
<h3 id="get-the-basic-gfx-scm-example-working"><span class="todo TODO">TODO</span> Get the <code>basic-gfx.scm</code> example working</h3>
</div>
<div id="outline-container-render-the-completed-image-to-a-png-file" class="outline-3">
<h3 id="render-the-completed-image-to-a-png-file"><span class="todo TODO">TODO</span> Render the completed image to a .png file</h3>
<div class="outline-text-3">
<p>
<a href="https://stackoverflow.com/questions/34255820/save-sdl-texture-to-file">https://stackoverflow.com/questions/34255820/save-sdl-texture-to-file</a>
</p>
</div>
</div>
</div>

<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2">
<ul class="org-ul">
<li><a href="https://www.gnu.org/software/guile/manual/html_node/Foreign-Function-Interface.html">https://www.gnu.org/software/guile/manual/html_node/Foreign-Function-Interface.html</a></li>
<li><a href="https://www.gnu.org/software/guile/manual/html_node/Foreign-Functions.html">https://www.gnu.org/software/guile/manual/html_node/Foreign-Functions.html</a></li>
<li><a href="https://www.gnu.org/software/guile/manual/html_node/Foreign-Structs.html">https://www.gnu.org/software/guile/manual/html_node/Foreign-Structs.html</a></li>
<li><a href="https://www.gnu.org/software/guile/manual/html_node/Void-Pointers-and-Byte-Access.html">https://www.gnu.org/software/guile/manual/html_node/Void-Pointers-and-Byte-Access.html</a></li>
<li><a href="https://willosborne.co.uk/coding/2019/11/16/iterators-and-for-loops-with-guile-scheme.html">https://willosborne.co.uk/coding/2019/11/16/iterators-and-for-loops-with-guile-scheme.html</a></li>
<li><a href="https://sourceforge.net/p/sdl2gfx/code/HEAD/tree/trunk/SDL2_gfxPrimitives.h">https://sourceforge.net/p/sdl2gfx/code/HEAD/tree/trunk/SDL2_gfxPrimitives.h</a></li>
<li><a href="https://www.ferzkopp.net/Software/SDL2_gfx/Docs/html/_s_d_l2__gfx_primitives_8h.html">https://www.ferzkopp.net/Software/SDL2_gfx/Docs/html/_s_d_l2__gfx_primitives_8h.html</a></li>
<li><a href="https://www.gnu.org/software/guile/manual/html_node/Coding-With-Keywords.html">https://www.gnu.org/software/guile/manual/html_node/Coding-With-Keywords.html</a></li>
</ul>

<p>
The commit for the code from this stream:
</p>

<p>
<a href="https://github.com/FluxHarmonic/flux-compose/commit/4adf5e16fc161f23cc9b95398f006ad6fb97c3c2">https://github.com/FluxHarmonic/flux-compose/commit/4adf5e16fc161f23cc9b95398f006ad6fb97c3c2</a>
</p>
</div>
</div>

<div id="outline-container-next-steps" class="outline-2">
<h2 id="next-steps">Next Steps</h2>
<div class="outline-text-2" id="text-next-steps">
</div>
<div id="outline-container-try-to-finish-instantiating-a-test-scene-in-c-use-gan-s-example" class="outline-3">
<h3 id="try-to-finish-instantiating-a-test-scene-in-c-use-gan-s-example"><span class="todo TODO">TODO</span> Try to finish instantiating a test scene in C (use Gan's example)</h3>
</div>
<div id="outline-container-figure-out-how-to-create-the-c-struct-representation-for-scene-objects-in-scheme" class="outline-3">
<h3 id="figure-out-how-to-create-the-c-struct-representation-for-scene-objects-in-scheme"><span class="todo TODO">TODO</span> Figure out how to create the C struct representation for scene objects in Scheme</h3>
</div>
<div id="outline-container-transmit-drawing-instructions-to-renderer-thread-in-some-form-sdl-event" class="outline-3">
<h3 id="transmit-drawing-instructions-to-renderer-thread-in-some-form-sdl-event"><span class="todo TODO">TODO</span> Transmit drawing instructions to renderer thread in some form (SDL event?)</h3>
</div>
<div id="outline-container-get-the-basic-gfx-scm-example-working" class="outline-3">
<h3 id="get-the-basic-gfx-scm-example-working"><span class="todo TODO">TODO</span> Get the <code>basic-gfx.scm</code> example working</h3>
</div>
<div id="outline-container-make-sure-that-we-can-re-eval-the-scheme-code-to-update-the-live-preview" class="outline-3">
<h3 id="make-sure-that-we-can-re-eval-the-scheme-code-to-update-the-live-preview"><span class="todo TODO">TODO</span> Make sure that we can re-eval the Scheme code to update the live preview</h3>
</div>
<div id="outline-container-render-the-completed-image-to-a-png-file" class="outline-3">
<h3 id="render-the-completed-image-to-a-png-file"><span class="todo TODO">TODO</span> Render the completed image to a .png file</h3>
</div>
</div>
]]></description>
    </item>
    
    <item>
      <title>Laying the Foundation</title>
      <link></link>
      <author>author@mail.com (Blog Author)</author>
      <guid isPermaLink="false"></guid>
      <pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate>
      <description><![CDATA[
<div id="outline-container-the-plan" class="outline-2">
<h2 id="the-plan">The Plan</h2>
<div class="outline-text-2">
<p>
The overall goal of this channel is to create an audiovisual playground that I use to create music, videos, graphics, and even games live on stream!
</p>

<p>
All tools will be purpose-built for myself.  I don't intend for others to use my tools at first, but over time I might be able to add a level of polish that would enable others to use them.
</p>
</div>

<div id="outline-container-audio-tools" class="outline-3">
<h3 id="audio-tools">Audio Tools</h3>
<div class="outline-text-3">
<ul class="org-ul">
<li>Synthesizers of various types (additive, subtractive, FM, wavetable, sampler)</li>
<li>Effects processors of various types (compressor, limiter, noise gate, reverb, chorus, flanger, etc)</li>
<li>Custom music creation environment on Linux powered by JACK or Pipewire (DAW)</li>
</ul>
</div>
</div>

<div id="outline-container-visual-tools" class="outline-3">
<h3 id="visual-tools">Visual Tools</h3>
<div class="outline-text-3">
<ul class="org-ul">
<li>Custom video creation and editing environment</li>
<li>Visual effects processors of various types</li>
<li>Audio visualizations of various types</li>
<li>Motion graphics tools for video animations and still graphics (video thumbnails, etc)</li>
<li>Whiteboard tool for drawing diagrams live in streams (and possibly for videos)</li>
</ul>
</div>
</div>

<div id="outline-container-programming" class="outline-3">
<h3 id="programming">Programming</h3>
<div class="outline-text-3">
<ul class="org-ul">
<li>Low-level custom C libraries (the core of all tools will be written in C!)</li>
<li>Custom programming tools for quick live programming of native applications and audio plugins</li>
<li>Custom Scheme-inspired scripting language that powers the various tools and serves as an authoring and data format</li>
</ul>
</div>
</div>

<div id="outline-container-streaming" class="outline-3">
<h3 id="streaming">Streaming</h3>
<div class="outline-text-3">
<ul class="org-ul">
<li>Custom live streaming software that integrates the various tools I make</li>
<li>Live-rendered scenes, video filters, generated graphics, viewer-interactable components, etc</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-why" class="outline-2">
<h2 id="why">Why?</h2>
<div class="outline-text-2">
<p>
I enjoy programming for the creative value and to see what I can accomplish.
</p>

<ul class="org-ul">
<li>Create background music and graphics for my YouTube channels</li>
<li>Produce a full album of music created with my own tools</li>
<li>Design a really unique streaming experience</li>
<li>Create Free Software games</li>
</ul>

<p>
I want to do all this while making the experience of watching it fun and interesting!
</p>

<p>
All of this won't be achievable in the short term: I see it as a long-term adventure in creativity.
</p>
</div>
</div>

<div id="outline-container-the-design" class="outline-2">
<h2 id="the-design">The Design</h2>
<div class="outline-text-2">
<p>
To accomplish all of this, I've got a specific design in mind:
</p>

<ul class="org-ul">
<li>Write all multimedia components in C (or similar low-level language)</li>
<li>Use Guile Scheme as the interactivity layer (at first)</li>
<li>Create an Emacs package to facilitate interactivity and rapid development</li>
<li>Use GNU Guix as the orchestrator for development, distribute tools via a channel</li>
<li>Be pragmatic, but ultimately write things as "from scratch" as I can!</li>
</ul>

<p>
The source to everything will be available as I write it, most likely licensed as GPL 3.0.
</p>
</div>
</div>

<div id="outline-container-the-starting-point" class="outline-2">
<h2 id="the-starting-point">The Starting Point</h2>
<div class="outline-text-2">
<ul class="org-ul">
<li>Get the basic infrastructure set up for the C core with the Guile Scheme layer</li>
<li>Set up a SDL window to start experimenting with graphics (later write our own graphics layer)</li>
<li>Start building a graphics tool to make video thumbnails and stream graphics</li>
</ul>
</div>
</div>

<div id="outline-container-tasks" class="outline-2">
<h2 id="tasks">Tasks</h2>
<div class="outline-text-2">
<p>
Here's what I'd like to accomplish today:
</p>
</div>

<div id="outline-container-create-a-basic-c-application-that-loads-guile-scheme-engine" class="outline-3">
<h3 id="create-a-basic-c-application-that-loads-guile-scheme-engine"><span class="done DONE">DONE</span> Create a basic C application that loads Guile Scheme engine</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-start-a-repl-and-get-it-loading-inside-of-emacs" class="outline-3">
<h3 id="start-a-repl-and-get-it-loading-inside-of-emacs"><span class="done DONE">DONE</span> Start a REPL and get it loading inside of Emacs</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-start-building-the-language-for-describing-graphics-scenes" class="outline-3">
<h3 id="start-building-the-language-for-describing-graphics-scenes"><span class="done DONE">DONE</span> Start building the "language" for describing graphics scenes</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-set-up-sdl-so-that-we-can-start-drawing-things-to-the-screen" class="outline-3">
<h3 id="set-up-sdl-so-that-we-can-start-drawing-things-to-the-screen"><span class="done DONE">DONE</span> Set up SDL so that we can start drawing things to the screen</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-figure-out-how-to-use-guix-shell-to-create-a-reproducible-dev-environment" class="outline-3">
<h3 id="figure-out-how-to-use-guix-shell-to-create-a-reproducible-dev-environment"><span class="done DONE">DONE</span> Figure out how to use <code>guix shell</code> to create a reproducible dev environment</h3>
<div class="outline-text-3">
</div>
</div>
<div id="outline-container-get-something-rendering-on-the-screen" class="outline-3">
<h3 id="get-something-rendering-on-the-screen"><span class="todo TODO">TODO</span> Get something rendering on the screen!</h3>
</div>
<div id="outline-container-push-the-initial-code-to-github" class="outline-3">
<h3 id="push-the-initial-code-to-github"><span class="todo TODO">TODO</span> Push the initial code to GitHub</h3>
</div>
</div>

<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2">
<p>
The code we created can be found at the following GitHub repository:
</p>

<p>
<a href="https://github.com/FluxHarmonic/flux-compose">https://github.com/FluxHarmonic/flux-compose</a>
</p>

<p>
Here are some links I gathered during the stream:
</p>

<ul class="org-ul">
<li><a href="https://serenityos.org/">https://serenityos.org/</a></li>
<li><a href="https://www.gnu.org/software/guile/manual/html_node/A-Sample-Guile-Main-Program.html">https://www.gnu.org/software/guile/manual/html_node/A-Sample-Guile-Main-Program.html</a></li>
<li><a href="https://gigi.nullneuron.net/gigilabs/showing-an-empty-window-in-sdl2/">https://gigi.nullneuron.net/gigilabs/showing-an-empty-window-in-sdl2/</a></li>
<li><a href="https://www.ibm.com/docs/en/i/7.2?topic=ssw_ibm_i_72/apis/users_14.htm">https://www.ibm.com/docs/en/i/7.2?topic=ssw_ibm_i_72/apis/users_14.htm</a></li>
</ul>
</div>
</div>

<div id="outline-container-next-steps" class="outline-2">
<h2 id="next-steps">Next Steps</h2>
<div class="outline-text-2" id="text-next-steps">
</div>
<div id="outline-container-don-t-show-guile-scheme-banner-when-starting-flux-studio" class="outline-3">
<h3 id="don-t-show-guile-scheme-banner-when-starting-flux-studio"><span class="todo TODO">TODO</span> Don't show Guile Scheme banner when starting <code>flux-studio</code></h3>
</div>
<div id="outline-container-figure-out-why-init-graphics-can-t-be-accessed-in-flux-graphics-module" class="outline-3">
<h3 id="figure-out-why-init-graphics-can-t-be-accessed-in-flux-graphics-module"><span class="todo TODO">TODO</span> Figure out why <code>init-graphics</code> can't be accessed in <code>flux graphics</code> module</h3>
</div>
<div id="outline-container-figure-out-why-init-graphics-is-crashing-the-process-can-we-come-up-with-a-good-debugging-strategy-running-via-gdb" class="outline-3">
<h3 id="figure-out-why-init-graphics-is-crashing-the-process-can-we-come-up-with-a-good-debugging-strategy-running-via-gdb"><span class="todo TODO">TODO</span> Figure out why <code>init-graphics</code> is crashing the process, can we come up with a good debugging strategy (running via gdb)</h3>
</div>
<div id="outline-container-get-something-rendering-on-the-screen" class="outline-3">
<h3 id="get-something-rendering-on-the-screen"><span class="todo TODO">TODO</span> Get something rendering on the screen!</h3>
</div>
</div>
]]></description>
    </item>
    

  </channel>
</rss>
